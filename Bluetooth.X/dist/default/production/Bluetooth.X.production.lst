

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jun 04 23:30:04 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 2.05
    19                           ; Generated 20/12/2018 GMT
    20                           ; 
    21                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	smallconst
    54  000800                     __psmallconst:
    55                           	opt callstack 0
    56  000800  00                 	db	0
    57  000801                     main@F3215:
    58                           	opt callstack 0
    59  000801  4C                 	db	76
    60  000802  65                 	db	101
    61  000803  64                 	db	100
    62  000804  20                 	db	32
    63  000805  61                 	db	97
    64  000806  6D                 	db	109
    65  000807  61                 	db	97
    66  000808  72                 	db	114
    67  000809  69                 	db	105
    68  00080A  6C                 	db	108
    69  00080B  6C                 	db	108
    70  00080C  6F                 	db	111
    71  00080D  00                 	db	0
    72  00080E                     __end_ofmain@F3215:
    73                           	opt callstack 0
    74  00080E                     _dpowers:
    75                           	opt callstack 0
    76  00080E  0001               	dw	1
    77  000810  000A               	dw	10
    78  000812  0064               	dw	100
    79  000814  03E8               	dw	1000
    80  000816  2710               	dw	10000
    81  000818                     __end_of_dpowers:
    82                           	opt callstack 0
    83  000818                     main@F3213:
    84                           	opt callstack 0
    85  000818  4C                 	db	76
    86  000819  65                 	db	101
    87  00081A  64                 	db	100
    88  00081B  20                 	db	32
    89  00081C  76                 	db	118
    90  00081D  65                 	db	101
    91  00081E  72                 	db	114
    92  00081F  64                 	db	100
    93  000820  65                 	db	101
    94  000821  00                 	db	0
    95  000822                     __end_ofmain@F3213:
    96                           	opt callstack 0
    97  000822                     main@F3211:
    98                           	opt callstack 0
    99  000822  4C                 	db	76
   100  000823  65                 	db	101
   101  000824  64                 	db	100
   102  000825  20                 	db	32
   103  000826  61                 	db	97
   104  000827  7A                 	db	122
   105  000828  75                 	db	117
   106  000829  6C                 	db	108
   107  00082A  00                 	db	0
   108  00082B                     __end_ofmain@F3211:
   109                           	opt callstack 0
   110  0000                     _RCREG	set	4014
   111  0000                     _PIR1bits	set	3998
   112  0000                     _TXREG	set	4013
   113  0000                     _RCSTAbits	set	4011
   114  0000                     _SPBRG	set	4015
   115  0000                     _BAUDCONbits	set	4024
   116  0000                     _TXSTAbits	set	4012
   117  0000                     _LATC	set	3979
   118  0000                     _TRISCbits	set	3988
   119  00082B                     STR_1:
   120  00082B  56                 	db	86	;'V'
   121  00082C  61                 	db	97	;'a'
   122  00082D  6C                 	db	108	;'l'
   123  00082E  6F                 	db	111	;'o'
   124  00082F  72                 	db	114	;'r'
   125  000830  20                 	db	32
   126  000831  74                 	db	116	;'t'
   127  000832  69                 	db	105	;'i'
   128  000833  6D                 	db	109	;'m'
   129  000834  65                 	db	101	;'e'
   130  000835  72                 	db	114	;'r'
   131  000836  3A                 	db	58	;':'
   132  000837  20                 	db	32
   133  000838  25                 	db	37
   134  000839  75                 	db	117	;'u'
   135  00083A  0A                 	db	10
   136  00083B  0D                 	db	13
   137  00083C  00                 	db	0
   138                           
   139                           ; #config settings
   140  00083D  00                 	db	0	; dummy byte at the end
   141  0000                     
   142                           	psect	cinit
   143  000B62                     __pcinit:
   144                           	opt callstack 0
   145  000B62                     start_initialization:
   146                           	opt callstack 0
   147  000B62                     __initialization:
   148                           	opt callstack 0
   149  000B62                     end_of_initialization:
   150                           	opt callstack 0
   151  000B62                     __end_of__initialization:
   152                           	opt callstack 0
   153  000B62  0E00               	movlw	low (__Lmediumconst shr (0+16))
   154  000B64  6EF8               	movwf	tblptru,c
   155  000B66  0100               	movlb	0
   156  000B68  EF9E  F004         	goto	_main	;jump to C main() function
   157                           
   158                           	psect	cstackCOMRAM
   159  000001                     __pcstackCOMRAM:
   160                           	opt callstack 0
   161  000001                     ?___lwdiv:
   162                           	opt callstack 0
   163  000001                     ?___lldiv:
   164                           	opt callstack 0
   165  000001                     putch@data:
   166                           	opt callstack 0
   167  000001                     ___lwdiv@dividend:
   168                           	opt callstack 0
   169  000001                     ___lldiv@dividend:
   170                           	opt callstack 0
   171                           
   172                           ; 4 bytes @ 0x0
   173  000001                     	ds	2
   174  000003                     ___lwdiv@divisor:
   175                           	opt callstack 0
   176                           
   177                           ; 2 bytes @ 0x2
   178  000003                     	ds	2
   179  000005                     ___lwdiv@quotient:
   180                           	opt callstack 0
   181  000005                     ___lldiv@divisor:
   182                           	opt callstack 0
   183                           
   184                           ; 4 bytes @ 0x4
   185  000005                     	ds	2
   186  000007                     ___lwdiv@counter:
   187                           	opt callstack 0
   188                           
   189                           ; 1 bytes @ 0x6
   190  000007                     	ds	1
   191  000008                     ?___lwmod:
   192                           	opt callstack 0
   193  000008                     ___lwmod@dividend:
   194                           	opt callstack 0
   195                           
   196                           ; 2 bytes @ 0x7
   197  000008                     	ds	1
   198  000009                     ___lldiv@quotient:
   199                           	opt callstack 0
   200                           
   201                           ; 4 bytes @ 0x8
   202  000009                     	ds	1
   203  00000A                     ___lwmod@divisor:
   204                           	opt callstack 0
   205                           
   206                           ; 2 bytes @ 0x9
   207  00000A                     	ds	2
   208  00000C                     ___lwmod@counter:
   209                           	opt callstack 0
   210                           
   211                           ; 1 bytes @ 0xB
   212  00000C                     	ds	1
   213  00000D                     ?_printf:
   214                           	opt callstack 0
   215  00000D                     ___lldiv@counter:
   216                           	opt callstack 0
   217  00000D                     printf@f:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0xC
   221  00000D                     	ds	1
   222  00000E                     USART_Init@FOSC:
   223                           	opt callstack 0
   224                           
   225                           ; 4 bytes @ 0xD
   226  00000E                     	ds	3
   227  000011                     printf@flag:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0x10
   231  000011                     	ds	1
   232  000012                     printf@ap:
   233                           	opt callstack 0
   234  000012                     USART_Init@BAUD:
   235                           	opt callstack 0
   236                           
   237                           ; 4 bytes @ 0x11
   238  000012                     	ds	2
   239  000014                     printf@val:
   240                           	opt callstack 0
   241                           
   242                           ; 2 bytes @ 0x13
   243  000014                     	ds	2
   244  000016                     ??_USART_Init:
   245  000016                     printf@prec:
   246                           	opt callstack 0
   247                           
   248                           ; 1 bytes @ 0x15
   249  000016                     	ds	1
   250  000017                     printf@c:
   251                           	opt callstack 0
   252                           
   253                           ; 1 bytes @ 0x16
   254  000017                     	ds	3
   255  00001A                     ??_main:
   256                           
   257                           ; 1 bytes @ 0x19
   258  00001A                     	ds	2
   259  00001C                     main@led3:
   260                           	opt callstack 0
   261                           
   262                           ; 13 bytes @ 0x1B
   263  00001C                     	ds	13
   264  000029                     main@led2:
   265                           	opt callstack 0
   266                           
   267                           ; 10 bytes @ 0x28
   268  000029                     	ds	10
   269  000033                     main@led1:
   270                           	opt callstack 0
   271                           
   272                           ; 9 bytes @ 0x32
   273  000033                     	ds	9
   274  00003C                     main@periodo:
   275                           	opt callstack 0
   276                           
   277                           ; 2 bytes @ 0x3B
   278  00003C                     	ds	2
   279                           
   280 ;;
   281 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   282 ;;
   283 ;; *************** function _main *****************
   284 ;; Defined at:
   285 ;;		line 9 in file "Main.c"
   286 ;; Parameters:    Size  Location     Type
   287 ;;		None
   288 ;; Auto vars:     Size  Location     Type
   289 ;;  dato           20    0        unsigned char [20]
   290 ;;  led3           13   27[COMRAM] const unsigned char [13]
   291 ;;  led2           10   40[COMRAM] const unsigned char [10]
   292 ;;  led1            9   50[COMRAM] const unsigned char [9]
   293 ;;  periodo         2   59[COMRAM] unsigned int 
   294 ;; Return value:  Size  Location     Type
   295 ;;                  1    wreg      void 
   296 ;; Registers used:
   297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   298 ;; Tracked objects:
   299 ;;		On entry : 0/0
   300 ;;		On exit  : 0/0
   301 ;;		Unchanged: 0/0
   302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   303 ;;      Params:         0       0       0       0       0       0       0       0       0
   304 ;;      Locals:        34       0       0       0       0       0       0       0       0
   305 ;;      Temps:          2       0       0       0       0       0       0       0       0
   306 ;;      Totals:        36       0       0       0       0       0       0       0       0
   307 ;;Total ram usage:       36 bytes
   308 ;; Hardware stack levels required when called:    2
   309 ;; This function calls:
   310 ;;		_USART_Init
   311 ;;		_printf
   312 ;; This function is called by:
   313 ;;		Startup code after reset
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text0
   318  00093C                     __ptext0:
   319                           	opt callstack 0
   320  00093C                     _main:
   321                           	opt callstack 29
   322                           
   323                           ;Main.c: 10: char dato[20];;Main.c: 11: const char led1[] = "Led azul";
   324                           
   325                           ;incstack = 0
   326  00093C  0E22               	movlw	low main@F3211
   327  00093E  6EF6               	movwf	tblptrl,c
   328  000940                     	if	1	;There is more than 1 active tblptr byte
   329  000940  0E08               	movlw	high main@F3211
   330  000942  6EF7               	movwf	tblptrh,c
   331  000944                     	endif
   332  000944                     	if	0	;There are less than 3 active tblptr bytes
   333  000944                     	endif
   334  000944  EE20  F033         	lfsr	2,main@led1
   335  000948  0E08               	movlw	8
   336  00094A                     u410:
   337  00094A  0009               	tblrd		*+
   338  00094C  CFF5 FFDE          	movff	tablat,postinc2
   339  000950  06E8               	decf	wreg,f,c
   340  000952  E2FB               	bc	u410
   341                           
   342                           ;Main.c: 12: const char led2[] = "Led verde";
   343  000954  0E18               	movlw	low main@F3213
   344  000956  6EF6               	movwf	tblptrl,c
   345  000958                     	if	1	;There is more than 1 active tblptr byte
   346  000958  0E08               	movlw	high main@F3213
   347  00095A  6EF7               	movwf	tblptrh,c
   348  00095C                     	endif
   349  00095C                     	if	0	;There are less than 3 active tblptr bytes
   350  00095C                     	endif
   351  00095C  EE20  F029         	lfsr	2,main@led2
   352  000960  0E09               	movlw	9
   353  000962                     u420:
   354  000962  0009               	tblrd		*+
   355  000964  CFF5 FFDE          	movff	tablat,postinc2
   356  000968  06E8               	decf	wreg,f,c
   357  00096A  E2FB               	bc	u420
   358                           
   359                           ;Main.c: 13: const char led3[] = "Led amarillo";
   360  00096C  0E01               	movlw	low main@F3215
   361  00096E  6EF6               	movwf	tblptrl,c
   362  000970                     	if	1	;There is more than 1 active tblptr byte
   363  000970  0E08               	movlw	high main@F3215
   364  000972  6EF7               	movwf	tblptrh,c
   365  000974                     	endif
   366  000974                     	if	0	;There are less than 3 active tblptr bytes
   367  000974                     	endif
   368  000974  EE20  F01C         	lfsr	2,main@led3
   369  000978  0E0C               	movlw	12
   370  00097A                     u430:
   371  00097A  0009               	tblrd		*+
   372  00097C  CFF5 FFDE          	movff	tablat,postinc2
   373  000980  06E8               	decf	wreg,f,c
   374  000982  E2FB               	bc	u430
   375                           
   376                           ;Main.c: 15: TRISCbits.TRISC0 = 0;
   377  000984  9094               	bcf	3988,0,c	;volatile
   378                           
   379                           ;Main.c: 16: TRISCbits.TRISC1 = 0;
   380  000986  9294               	bcf	3988,1,c	;volatile
   381                           
   382                           ;Main.c: 17: TRISCbits.TRISC2 = 0;
   383  000988  9494               	bcf	3988,2,c	;volatile
   384                           
   385                           ;Main.c: 18: LATC = 0x00;
   386  00098A  0E00               	movlw	0
   387  00098C  6E8B               	movwf	3979,c	;volatile
   388                           
   389                           ;Main.c: 19: USART_Init(4000000,9600);
   390  00098E  0E00               	movlw	0
   391  000990  6E0E               	movwf	USART_Init@FOSC,c
   392  000992  0E09               	movlw	9
   393  000994  6E0F               	movwf	USART_Init@FOSC+1,c
   394  000996  0E3D               	movlw	61
   395  000998  6E10               	movwf	USART_Init@FOSC+2,c
   396  00099A  0E00               	movlw	0
   397  00099C  6E11               	movwf	USART_Init@FOSC+3,c
   398  00099E  0E80               	movlw	128
   399  0009A0  6E12               	movwf	USART_Init@BAUD,c
   400  0009A2  0E25               	movlw	37
   401  0009A4  6E13               	movwf	USART_Init@BAUD+1,c
   402  0009A6  0E00               	movlw	0
   403  0009A8  6E14               	movwf	USART_Init@BAUD+2,c
   404  0009AA  0E00               	movlw	0
   405  0009AC  6E15               	movwf	USART_Init@BAUD+3,c
   406  0009AE  EC34  F005         	call	_USART_Init	;wreg free
   407                           
   408                           ;Main.c: 20: unsigned int periodo = 65535-(1E-3*4E6/64);
   409  0009B2  0EFF               	movlw	255
   410  0009B4  6E3D               	movwf	main@periodo+1,c
   411  0009B6  0EC0               	movlw	192
   412  0009B8  6E3C               	movwf	main@periodo,c
   413  0009BA                     l1127:
   414                           
   415                           ;Main.c: 22: printf("Valor timer: %u\n\r",periodo);
   416  0009BA  0E2B               	movlw	low STR_1
   417  0009BC  6E0D               	movwf	printf@f,c
   418  0009BE  0E08               	movlw	high STR_1
   419  0009C0  6E0E               	movwf	printf@f+1,c
   420  0009C2  C03C  F00F         	movff	main@periodo,?_printf+2
   421  0009C6  C03D  F010         	movff	main@periodo+1,?_printf+3
   422  0009CA  EC1F  F004         	call	_printf	;wreg free
   423                           
   424                           ;Main.c: 23: _delay((unsigned long)((500)*(4E6/4000.0)));
   425  0009CE  0E03               	movlw	3
   426  0009D0  6E1B               	movwf	(??_main+1)& (0+255),c
   427  0009D2  0E8A               	movlw	138
   428  0009D4  6E1A               	movwf	??_main& (0+255),c
   429  0009D6  0E56               	movlw	86
   430  0009D8                     u447:
   431  0009D8  2EE8               	decfsz	wreg,f,c
   432  0009DA  D7FE               	bra	u447
   433  0009DC  2E1A               	decfsz	??_main& (0+255),f,c
   434  0009DE  D7FC               	bra	u447
   435  0009E0  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   436  0009E2  D7FA               	bra	u447
   437  0009E4  D7EA               	goto	l1127
   438  0009E6                     __end_of_main:
   439                           	opt callstack 0
   440                           
   441 ;; *************** function _printf *****************
   442 ;; Defined at:
   443 ;;		line 472 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;  f               2   12[COMRAM] PTR const unsigned char 
   446 ;;		 -> STR_1(18), 
   447 ;; Auto vars:     Size  Location     Type
   448 ;;  tmpval          4    0        struct .
   449 ;;  cp              3    0        PTR const unsigned char 
   450 ;;  val             2   19[COMRAM] unsigned int 
   451 ;;  ap              2   17[COMRAM] PTR void [1]
   452 ;;		 -> ?_printf(2), 
   453 ;;  len             2    0        unsigned int 
   454 ;;  c               1   22[COMRAM] unsigned char 
   455 ;;  prec            1   21[COMRAM] char 
   456 ;;  flag            1   16[COMRAM] unsigned char 
   457 ;; Return value:  Size  Location     Type
   458 ;;                  2   12[COMRAM] int 
   459 ;; Registers used:
   460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   466 ;;      Params:         4       0       0       0       0       0       0       0       0
   467 ;;      Locals:         7       0       0       0       0       0       0       0       0
   468 ;;      Temps:          0       0       0       0       0       0       0       0       0
   469 ;;      Totals:        11       0       0       0       0       0       0       0       0
   470 ;;Total ram usage:       11 bytes
   471 ;; Hardware stack levels used:    1
   472 ;; Hardware stack levels required when called:    1
   473 ;; This function calls:
   474 ;;		___lwdiv
   475 ;;		___lwmod
   476 ;;		_putch
   477 ;; This function is called by:
   478 ;;		_main
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text1
   483  00083E                     __ptext1:
   484                           	opt callstack 0
   485  00083E                     _printf:
   486                           	opt callstack 29
   487                           
   488                           ;doprnt.c: 474: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
   489                           
   490                           ;incstack = 0
   491  00083E  0E0F               	movlw	low (?_printf+2)
   492  000840  6E12               	movwf	printf@ap,c
   493  000842  0E00               	movlw	high (?_printf+2)
   494  000844  6E13               	movwf	printf@ap+1,c
   495                           
   496                           ;doprnt.c: 548: while((c = *f++)) {
   497  000846  D06D               	goto	u390
   498  000848                     l1075:
   499                           
   500                           ;doprnt.c: 550: if(c != '%')
   501  000848  0E25               	movlw	37
   502  00084A  1817               	xorwf	printf@c,w,c
   503  00084C  B4D8               	btfsc	status,2,c
   504  00084E  D004               	goto	l1079
   505                           
   506                           ;doprnt.c: 552: {;doprnt.c: 553: (putch(c) );
   507  000850  5017               	movf	printf@c,w,c
   508  000852  ECAB  F005         	call	_putch
   509                           
   510                           ;doprnt.c: 554: continue;
   511  000856  D065               	goto	u390
   512  000858                     l1079:
   513                           
   514                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
   515  000858  0E00               	movlw	0
   516  00085A  6E11               	movwf	printf@flag,c
   517                           
   518                           ;doprnt.c: 654: switch(c = *f++) {
   519  00085C  D003               	goto	l1085
   520  00085E                     l1081:
   521                           
   522                           ;doprnt.c: 837: flag |= 0xC0;
   523  00085E  0EC0               	movlw	192
   524  000860  1211               	iorwf	printf@flag,f,c
   525                           
   526                           ;doprnt.c: 838: break;
   527  000862  D011               	goto	l1087
   528  000864                     l1085:
   529  000864  C00D  FFF6         	movff	printf@f,tblptrl
   530  000868  C00E  FFF7         	movff	printf@f+1,tblptrh
   531  00086C  4A0D               	infsnz	printf@f,f,c
   532  00086E  2A0E               	incf	printf@f+1,f,c
   533  000870                     	if	0	;tblptru may be non-zero
   534  000870                     	endif
   535  000870                     	if	0	;tblptru may be non-zero
   536  000870                     	endif
   537  000870  0008               	tblrd		*
   538  000872  CFF5 F017          	movff	tablat,printf@c
   539  000876  5017               	movf	printf@c,w,c
   540                           
   541                           ; Switch size 1, requested type "simple"
   542                           ; Number of cases is 2, Range of values is 0 to 117
   543                           ; switch strategies available:
   544                           ; Name         Instructions Cycles
   545                           ; simple_byte            7     4 (average)
   546                           ;	Chosen strategy is simple_byte
   547  000878  0A00               	xorlw	0	; case 0
   548  00087A  B4D8               	btfsc	status,2,c
   549  00087C  0012               	return	
   550  00087E  0A75               	xorlw	117	; case 117
   551  000880  B4D8               	btfsc	status,2,c
   552  000882  D7ED               	goto	l1081
   553  000884  D04E               	goto	u390
   554  000886                     l1087:
   555                           
   556                           ;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
   557  000886  C012  FFD9         	movff	printf@ap,fsr2l
   558  00088A  C013  FFDA         	movff	printf@ap+1,fsr2h
   559  00088E  CFDE F014          	movff	postinc2,printf@val
   560  000892  CFDD F015          	movff	postdec2,printf@val+1
   561  000896  0E02               	movlw	2
   562  000898  2612               	addwf	printf@ap,f,c
   563  00089A  0E00               	movlw	0
   564  00089C  2213               	addwfc	printf@ap+1,f,c
   565                           
   566                           ;doprnt.c: 1306: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
   567  00089E  0E01               	movlw	1
   568  0008A0  6E17               	movwf	printf@c,c
   569  0008A2                     l1097:
   570                           
   571                           ;doprnt.c: 1325: if(val < dpowers[c])
   572  0008A2  5017               	movf	printf@c,w,c
   573  0008A4  0D02               	mullw	2
   574  0008A6  0E0E               	movlw	low _dpowers
   575  0008A8  24F3               	addwf	prodl,w,c
   576  0008AA  6EF6               	movwf	tblptrl,c
   577  0008AC  0E08               	movlw	high _dpowers
   578  0008AE  20F4               	addwfc	prodh,w,c
   579  0008B0  6EF7               	movwf	tblptrh,c
   580  0008B2                     	if	0	;There are less than 3 active tblptr bytes
   581  0008B2                     	endif
   582  0008B2  0009               	tblrd		*+
   583  0008B4  50F5               	movf	tablat,w,c
   584  0008B6  5C14               	subwf	printf@val,w,c
   585  0008B8  0009               	tblrd		*+
   586  0008BA  50F5               	movf	tablat,w,c
   587  0008BC  5815               	subwfb	printf@val+1,w,c
   588  0008BE  A0D8               	btfss	status,0,c
   589  0008C0  D005               	goto	u380
   590  0008C2  2A17               	incf	printf@c,f,c
   591  0008C4  0E05               	movlw	5
   592  0008C6  1817               	xorwf	printf@c,w,c
   593  0008C8  A4D8               	btfss	status,2,c
   594  0008CA  D7EB               	goto	l1097
   595  0008CC                     u380:
   596                           
   597                           ;doprnt.c: 1441: {;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
   598  0008CC  C017  F016         	movff	printf@c,printf@prec
   599                           
   600                           ;doprnt.c: 1493: while(prec--) {
   601  0008D0  D024               	goto	l1109
   602  0008D2                     l1105:
   603                           
   604                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
   605  0008D2  5016               	movf	printf@prec,w,c
   606  0008D4  0D02               	mullw	2
   607  0008D6  0E0E               	movlw	low _dpowers
   608  0008D8  24F3               	addwf	prodl,w,c
   609  0008DA  6EF6               	movwf	tblptrl,c
   610  0008DC  0E08               	movlw	high _dpowers
   611  0008DE  20F4               	addwfc	prodh,w,c
   612  0008E0  6EF7               	movwf	tblptrh,c
   613  0008E2                     	if	0	;There are less than 3 active tblptr bytes
   614  0008E2                     	endif
   615  0008E2  0009               	tblrd		*+
   616  0008E4  CFF5 F003          	movff	tablat,___lwdiv@divisor
   617  0008E8  000A               	tblrd		*-
   618  0008EA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   619  0008EE  C014  F001         	movff	printf@val,___lwdiv@dividend
   620  0008F2  C015  F002         	movff	printf@val+1,___lwdiv@dividend+1
   621  0008F6  EC61  F005         	call	___lwdiv	;wreg free
   622  0008FA  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   623  0008FE  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   624  000902  0E00               	movlw	0
   625  000904  6E0B               	movwf	___lwmod@divisor+1,c
   626  000906  0E0A               	movlw	10
   627  000908  6E0A               	movwf	___lwmod@divisor,c
   628  00090A  EC8A  F005         	call	___lwmod	;wreg free
   629  00090E  5008               	movf	?___lwmod,w,c
   630  000910  0F30               	addlw	48
   631  000912  6E17               	movwf	printf@c,c
   632                           
   633                           ;doprnt.c: 1542: };doprnt.c: 1543: (putch(c) );
   634  000914  5017               	movf	printf@c,w,c
   635  000916  ECAB  F005         	call	_putch
   636  00091A                     l1109:
   637  00091A  0616               	decf	printf@prec,f,c
   638  00091C  2816               	incf	printf@prec,w,c
   639  00091E  A4D8               	btfss	status,2,c
   640  000920  D7D8               	goto	l1105
   641  000922                     u390:
   642  000922  C00D  FFF6         	movff	printf@f,tblptrl
   643  000926  C00E  FFF7         	movff	printf@f+1,tblptrh
   644  00092A  4A0D               	infsnz	printf@f,f,c
   645  00092C  2A0E               	incf	printf@f+1,f,c
   646  00092E                     	if	0	;tblptru may be non-zero
   647  00092E                     	endif
   648  00092E                     	if	0	;tblptru may be non-zero
   649  00092E                     	endif
   650  00092E  0008               	tblrd		*
   651  000930  CFF5 F017          	movff	tablat,printf@c
   652  000934  5017               	movf	printf@c,w,c
   653  000936  B4D8               	btfsc	status,2,c
   654  000938  0012               	return	
   655  00093A  D786               	goto	l1075
   656  00093C                     __end_of_printf:
   657                           	opt callstack 0
   658                           
   659 ;; *************** function _putch *****************
   660 ;; Defined at:
   661 ;;		line 30 in file "USART.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;  data            1    wreg     unsigned char 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  data            1    0[COMRAM] unsigned char 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   675 ;;      Params:         0       0       0       0       0       0       0       0       0
   676 ;;      Locals:         1       0       0       0       0       0       0       0       0
   677 ;;      Temps:          0       0       0       0       0       0       0       0       0
   678 ;;      Totals:         1       0       0       0       0       0       0       0       0
   679 ;;Total ram usage:        1 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_printf
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text2
   689  000B56                     __ptext2:
   690                           	opt callstack 0
   691  000B56                     _putch:
   692                           	opt callstack 29
   693                           
   694                           ;incstack = 0
   695                           ;putch@data stored from wreg
   696  000B56  6E01               	movwf	putch@data,c
   697  000B58                     
   698                           ;USART.c: 31: while(TXSTAbits.TRMT == 0);
   699  000B58  A2AC               	btfss	4012,1,c	;volatile
   700  000B5A  D7FE               	goto	l851
   701                           
   702                           ;USART.c: 32: TXREG = data;
   703  000B5C  C001  FFAD         	movff	putch@data,4013	;volatile
   704  000B60  0012               	return		;funcret
   705  000B62                     __end_of_putch:
   706                           	opt callstack 0
   707                           
   708 ;; *************** function ___lwmod *****************
   709 ;; Defined at:
   710 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  dividend        2    7[COMRAM] unsigned int 
   713 ;;  divisor         2    9[COMRAM] unsigned int 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  counter         1   11[COMRAM] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;                  2    7[COMRAM] unsigned int 
   718 ;; Registers used:
   719 ;;		wreg, status,2, status,0
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   725 ;;      Params:         4       0       0       0       0       0       0       0       0
   726 ;;      Locals:         1       0       0       0       0       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0       0       0       0       0
   728 ;;      Totals:         5       0       0       0       0       0       0       0       0
   729 ;;Total ram usage:        5 bytes
   730 ;; Hardware stack levels used:    1
   731 ;; This function calls:
   732 ;;		Nothing
   733 ;; This function is called by:
   734 ;;		_printf
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text3
   739  000B14                     __ptext3:
   740                           	opt callstack 0
   741  000B14                     ___lwmod:
   742                           	opt callstack 29
   743                           
   744                           ;incstack = 0
   745  000B14  500A               	movf	___lwmod@divisor,w,c
   746  000B16  100B               	iorwf	___lwmod@divisor+1,w,c
   747  000B18  B4D8               	btfsc	status,2,c
   748  000B1A  D018               	goto	l595
   749  000B1C  0E01               	movlw	1
   750  000B1E  6E0C               	movwf	___lwmod@counter,c
   751  000B20  D004               	goto	l1053
   752  000B22                     l1051:
   753  000B22  90D8               	bcf	status,0,c
   754  000B24  360A               	rlcf	___lwmod@divisor,f,c
   755  000B26  360B               	rlcf	___lwmod@divisor+1,f,c
   756  000B28  2A0C               	incf	___lwmod@counter,f,c
   757  000B2A                     l1053:
   758  000B2A  AE0B               	btfss	___lwmod@divisor+1,7,c
   759  000B2C  D7FA               	goto	l1051
   760  000B2E                     u330:
   761  000B2E  500A               	movf	___lwmod@divisor,w,c
   762  000B30  5C08               	subwf	___lwmod@dividend,w,c
   763  000B32  500B               	movf	___lwmod@divisor+1,w,c
   764  000B34  5809               	subwfb	___lwmod@dividend+1,w,c
   765  000B36  A0D8               	btfss	status,0,c
   766  000B38  D004               	goto	l1059
   767  000B3A  500A               	movf	___lwmod@divisor,w,c
   768  000B3C  5E08               	subwf	___lwmod@dividend,f,c
   769  000B3E  500B               	movf	___lwmod@divisor+1,w,c
   770  000B40  5A09               	subwfb	___lwmod@dividend+1,f,c
   771  000B42                     l1059:
   772  000B42  90D8               	bcf	status,0,c
   773  000B44  320B               	rrcf	___lwmod@divisor+1,f,c
   774  000B46  320A               	rrcf	___lwmod@divisor,f,c
   775  000B48  2E0C               	decfsz	___lwmod@counter,f,c
   776  000B4A  D7F1               	goto	u330
   777  000B4C                     l595:
   778  000B4C  C008  F008         	movff	___lwmod@dividend,?___lwmod
   779  000B50  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   780  000B54  0012               	return		;funcret
   781  000B56                     __end_of___lwmod:
   782                           	opt callstack 0
   783                           
   784 ;; *************** function ___lwdiv *****************
   785 ;; Defined at:
   786 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  dividend        2    0[COMRAM] unsigned int 
   789 ;;  divisor         2    2[COMRAM] unsigned int 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  quotient        2    4[COMRAM] unsigned int 
   792 ;;  counter         1    6[COMRAM] unsigned char 
   793 ;; Return value:  Size  Location     Type
   794 ;;                  2    0[COMRAM] unsigned int 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   802 ;;      Params:         4       0       0       0       0       0       0       0       0
   803 ;;      Locals:         3       0       0       0       0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0       0       0       0       0
   805 ;;      Totals:         7       0       0       0       0       0       0       0       0
   806 ;;Total ram usage:        7 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; This function calls:
   809 ;;		Nothing
   810 ;; This function is called by:
   811 ;;		_printf
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           	psect	text4
   816  000AC2                     __ptext4:
   817                           	opt callstack 0
   818  000AC2                     ___lwdiv:
   819                           	opt callstack 29
   820                           
   821                           ;incstack = 0
   822  000AC2  0E00               	movlw	0
   823  000AC4  6E06               	movwf	___lwdiv@quotient+1,c
   824  000AC6  0E00               	movlw	0
   825  000AC8  6E05               	movwf	___lwdiv@quotient,c
   826  000ACA  5003               	movf	___lwdiv@divisor,w,c
   827  000ACC  1004               	iorwf	___lwdiv@divisor+1,w,c
   828  000ACE  B4D8               	btfsc	status,2,c
   829  000AD0  D01C               	goto	l585
   830  000AD2  0E01               	movlw	1
   831  000AD4  6E07               	movwf	___lwdiv@counter,c
   832  000AD6  D004               	goto	l1033
   833  000AD8                     l1031:
   834  000AD8  90D8               	bcf	status,0,c
   835  000ADA  3603               	rlcf	___lwdiv@divisor,f,c
   836  000ADC  3604               	rlcf	___lwdiv@divisor+1,f,c
   837  000ADE  2A07               	incf	___lwdiv@counter,f,c
   838  000AE0                     l1033:
   839  000AE0  AE04               	btfss	___lwdiv@divisor+1,7,c
   840  000AE2  D7FA               	goto	l1031
   841  000AE4                     u300:
   842  000AE4  90D8               	bcf	status,0,c
   843  000AE6  3605               	rlcf	___lwdiv@quotient,f,c
   844  000AE8  3606               	rlcf	___lwdiv@quotient+1,f,c
   845  000AEA  5003               	movf	___lwdiv@divisor,w,c
   846  000AEC  5C01               	subwf	___lwdiv@dividend,w,c
   847  000AEE  5004               	movf	___lwdiv@divisor+1,w,c
   848  000AF0  5802               	subwfb	___lwdiv@dividend+1,w,c
   849  000AF2  A0D8               	btfss	status,0,c
   850  000AF4  D005               	goto	l1043
   851  000AF6  5003               	movf	___lwdiv@divisor,w,c
   852  000AF8  5E01               	subwf	___lwdiv@dividend,f,c
   853  000AFA  5004               	movf	___lwdiv@divisor+1,w,c
   854  000AFC  5A02               	subwfb	___lwdiv@dividend+1,f,c
   855  000AFE  8005               	bsf	___lwdiv@quotient,0,c
   856  000B00                     l1043:
   857  000B00  90D8               	bcf	status,0,c
   858  000B02  3204               	rrcf	___lwdiv@divisor+1,f,c
   859  000B04  3203               	rrcf	___lwdiv@divisor,f,c
   860  000B06  2E07               	decfsz	___lwdiv@counter,f,c
   861  000B08  D7ED               	goto	u300
   862  000B0A                     l585:
   863  000B0A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   864  000B0E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   865  000B12  0012               	return		;funcret
   866  000B14                     __end_of___lwdiv:
   867                           	opt callstack 0
   868                           
   869 ;; *************** function _USART_Init *****************
   870 ;; Defined at:
   871 ;;		line 4 in file "USART.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  FOSC            4   13[COMRAM] unsigned long 
   874 ;;  BAUD            4   17[COMRAM] unsigned long 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   886 ;;      Params:         8       0       0       0       0       0       0       0       0
   887 ;;      Locals:         0       0       0       0       0       0       0       0       0
   888 ;;      Temps:          4       0       0       0       0       0       0       0       0
   889 ;;      Totals:        12       0       0       0       0       0       0       0       0
   890 ;;Total ram usage:       12 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    1
   893 ;; This function calls:
   894 ;;		___lldiv
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text5
   901  000A68                     __ptext5:
   902                           	opt callstack 0
   903  000A68                     _USART_Init:
   904                           	opt callstack 29
   905                           
   906                           ;USART.c: 6: TRISCbits.TRISC6 = 0;
   907                           
   908                           ;incstack = 0
   909  000A68  9C94               	bcf	3988,6,c	;volatile
   910                           
   911                           ;USART.c: 7: TRISCbits.TRISC7 = 1;
   912  000A6A  8E94               	bsf	3988,7,c	;volatile
   913                           
   914                           ;USART.c: 9: TXSTAbits.SYNC = 0;
   915  000A6C  98AC               	bcf	4012,4,c	;volatile
   916                           
   917                           ;USART.c: 10: TXSTAbits.BRGH = 1;
   918  000A6E  84AC               	bsf	4012,2,c	;volatile
   919                           
   920                           ;USART.c: 11: BAUDCONbits.BRG16 = 0;
   921  000A70  96B8               	bcf	4024,3,c	;volatile
   922                           
   923                           ;USART.c: 12: SPBRG = (unsigned int)(FOSC/(16*BAUD)-1);
   924  000A72  C00E  F001         	movff	USART_Init@FOSC,___lldiv@dividend
   925  000A76  C00F  F002         	movff	USART_Init@FOSC+1,___lldiv@dividend+1
   926  000A7A  C010  F003         	movff	USART_Init@FOSC+2,___lldiv@dividend+2
   927  000A7E  C011  F004         	movff	USART_Init@FOSC+3,___lldiv@dividend+3
   928  000A82  C012  F016         	movff	USART_Init@BAUD,??_USART_Init
   929  000A86  C013  F017         	movff	USART_Init@BAUD+1,??_USART_Init+1
   930  000A8A  C014  F018         	movff	USART_Init@BAUD+2,??_USART_Init+2
   931  000A8E  C015  F019         	movff	USART_Init@BAUD+3,??_USART_Init+3
   932  000A92  0E04               	movlw	4
   933  000A94                     u355:
   934  000A94  90D8               	bcf	status,0,c
   935  000A96  3616               	rlcf	??_USART_Init,f,c
   936  000A98  3617               	rlcf	??_USART_Init+1,f,c
   937  000A9A  3618               	rlcf	??_USART_Init+2,f,c
   938  000A9C  3619               	rlcf	??_USART_Init+3,f,c
   939  000A9E  2EE8               	decfsz	wreg,f,c
   940  000AA0  D7F9               	goto	u355
   941  000AA2  C016  F005         	movff	??_USART_Init,___lldiv@divisor
   942  000AA6  C017  F006         	movff	??_USART_Init+1,___lldiv@divisor+1
   943  000AAA  C018  F007         	movff	??_USART_Init+2,___lldiv@divisor+2
   944  000AAE  C019  F008         	movff	??_USART_Init+3,___lldiv@divisor+3
   945  000AB2  ECF3  F004         	call	___lldiv	;wreg free
   946  000AB6  0401               	decf	?___lldiv,w,c
   947  000AB8  6EAF               	movwf	4015,c	;volatile
   948                           
   949                           ;USART.c: 13: RCSTAbits.SPEN = 1;
   950  000ABA  8EAB               	bsf	4011,7,c	;volatile
   951                           
   952                           ;USART.c: 14: TXSTAbits.TXEN = 1;
   953  000ABC  8AAC               	bsf	4012,5,c	;volatile
   954                           
   955                           ;USART.c: 15: RCSTAbits.CREN = 1;
   956  000ABE  88AB               	bsf	4011,4,c	;volatile
   957  000AC0  0012               	return		;funcret
   958  000AC2                     __end_of_USART_Init:
   959                           	opt callstack 0
   960                           
   961 ;; *************** function ___lldiv *****************
   962 ;; Defined at:
   963 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  dividend        4    0[COMRAM] unsigned long 
   966 ;;  divisor         4    4[COMRAM] unsigned long 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  quotient        4    8[COMRAM] unsigned long 
   969 ;;  counter         1   12[COMRAM] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  4    0[COMRAM] unsigned long 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   979 ;;      Params:         8       0       0       0       0       0       0       0       0
   980 ;;      Locals:         5       0       0       0       0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0       0       0       0       0
   982 ;;      Totals:        13       0       0       0       0       0       0       0       0
   983 ;;Total ram usage:       13 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		_USART_Init
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           	psect	text6
   993  0009E6                     __ptext6:
   994                           	opt callstack 0
   995  0009E6                     ___lldiv:
   996                           	opt callstack 29
   997                           
   998                           ;incstack = 0
   999  0009E6  0E00               	movlw	0
  1000  0009E8  6E09               	movwf	___lldiv@quotient,c
  1001  0009EA  0E00               	movlw	0
  1002  0009EC  6E0A               	movwf	___lldiv@quotient+1,c
  1003  0009EE  0E00               	movlw	0
  1004  0009F0  6E0B               	movwf	___lldiv@quotient+2,c
  1005  0009F2  0E00               	movlw	0
  1006  0009F4  6E0C               	movwf	___lldiv@quotient+3,c
  1007  0009F6  5005               	movf	___lldiv@divisor,w,c
  1008  0009F8  1006               	iorwf	___lldiv@divisor+1,w,c
  1009  0009FA  1007               	iorwf	___lldiv@divisor+2,w,c
  1010  0009FC  1008               	iorwf	___lldiv@divisor+3,w,c
  1011  0009FE  B4D8               	btfsc	status,2,c
  1012  000A00  D02A               	goto	l133
  1013  000A02  0E01               	movlw	1
  1014  000A04  6E0D               	movwf	___lldiv@counter,c
  1015  000A06  D006               	goto	l1011
  1016  000A08                     l1009:
  1017  000A08  90D8               	bcf	status,0,c
  1018  000A0A  3605               	rlcf	___lldiv@divisor,f,c
  1019  000A0C  3606               	rlcf	___lldiv@divisor+1,f,c
  1020  000A0E  3607               	rlcf	___lldiv@divisor+2,f,c
  1021  000A10  3608               	rlcf	___lldiv@divisor+3,f,c
  1022  000A12  2A0D               	incf	___lldiv@counter,f,c
  1023  000A14                     l1011:
  1024  000A14  AE08               	btfss	___lldiv@divisor+3,7,c
  1025  000A16  D7F8               	goto	l1009
  1026  000A18                     u270:
  1027  000A18  90D8               	bcf	status,0,c
  1028  000A1A  3609               	rlcf	___lldiv@quotient,f,c
  1029  000A1C  360A               	rlcf	___lldiv@quotient+1,f,c
  1030  000A1E  360B               	rlcf	___lldiv@quotient+2,f,c
  1031  000A20  360C               	rlcf	___lldiv@quotient+3,f,c
  1032  000A22  5005               	movf	___lldiv@divisor,w,c
  1033  000A24  5C01               	subwf	___lldiv@dividend,w,c
  1034  000A26  5006               	movf	___lldiv@divisor+1,w,c
  1035  000A28  5802               	subwfb	___lldiv@dividend+1,w,c
  1036  000A2A  5007               	movf	___lldiv@divisor+2,w,c
  1037  000A2C  5803               	subwfb	___lldiv@dividend+2,w,c
  1038  000A2E  5008               	movf	___lldiv@divisor+3,w,c
  1039  000A30  5804               	subwfb	___lldiv@dividend+3,w,c
  1040  000A32  A0D8               	btfss	status,0,c
  1041  000A34  D009               	goto	l1021
  1042  000A36  5005               	movf	___lldiv@divisor,w,c
  1043  000A38  5E01               	subwf	___lldiv@dividend,f,c
  1044  000A3A  5006               	movf	___lldiv@divisor+1,w,c
  1045  000A3C  5A02               	subwfb	___lldiv@dividend+1,f,c
  1046  000A3E  5007               	movf	___lldiv@divisor+2,w,c
  1047  000A40  5A03               	subwfb	___lldiv@dividend+2,f,c
  1048  000A42  5008               	movf	___lldiv@divisor+3,w,c
  1049  000A44  5A04               	subwfb	___lldiv@dividend+3,f,c
  1050  000A46  8009               	bsf	___lldiv@quotient,0,c
  1051  000A48                     l1021:
  1052  000A48  90D8               	bcf	status,0,c
  1053  000A4A  3208               	rrcf	___lldiv@divisor+3,f,c
  1054  000A4C  3207               	rrcf	___lldiv@divisor+2,f,c
  1055  000A4E  3206               	rrcf	___lldiv@divisor+1,f,c
  1056  000A50  3205               	rrcf	___lldiv@divisor,f,c
  1057  000A52  2E0D               	decfsz	___lldiv@counter,f,c
  1058  000A54  D7E1               	goto	u270
  1059  000A56                     l133:
  1060  000A56  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1061  000A5A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1062  000A5E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1063  000A62  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1064  000A66  0012               	return		;funcret
  1065  000A68                     __end_of___lldiv:
  1066                           	opt callstack 0
  1067                           
  1068                           	psect	rparam
  1069  0000                     tosu	equ	0xFFF
  1070                           tosh	equ	0xFFE
  1071                           tosl	equ	0xFFD
  1072                           stkptr	equ	0xFFC
  1073                           pclatu	equ	0xFFB
  1074                           pclath	equ	0xFFA
  1075                           pcl	equ	0xFF9
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           indf0	equ	0xFEF
  1083                           postinc0	equ	0xFEE
  1084                           postdec0	equ	0xFED
  1085                           preinc0	equ	0xFEC
  1086                           plusw0	equ	0xFEB
  1087                           fsr0h	equ	0xFEA
  1088                           fsr0l	equ	0xFE9
  1089                           wreg	equ	0xFE8
  1090                           indf1	equ	0xFE7
  1091                           postinc1	equ	0xFE6
  1092                           postdec1	equ	0xFE5
  1093                           preinc1	equ	0xFE4
  1094                           plusw1	equ	0xFE3
  1095                           fsr1h	equ	0xFE2
  1096                           fsr1l	equ	0xFE1
  1097                           bsr	equ	0xFE0
  1098                           indf2	equ	0xFDF
  1099                           postinc2	equ	0xFDE
  1100                           postdec2	equ	0xFDD
  1101                           preinc2	equ	0xFDC
  1102                           plusw2	equ	0xFDB
  1103                           fsr2h	equ	0xFDA
  1104                           fsr2l	equ	0xFD9
  1105                           status	equ	0xFD8


Data Sizes:
    Strings     18
    Constant    42
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     61      61
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_USART_Init
    _printf->___lwmod
    ___lwmod->___lwdiv
    _USART_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                56    56      0    1571
                                             25 COMRAM    36    36      0
                         _USART_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4    1035
                                             12 COMRAM    11     7      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          12     4      8     510
                                             13 COMRAM    12     4      8
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___lldiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     3D      3D       1       64.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jun 04 23:30:04 2020

            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l133 0A56                      l585 0B0A                      l595 0B4C  
                    l851 0B58             __CFG_CPB$OFF 000000                      u300 0AE4  
                    u330 0B2E                      u410 094A                      u420 0962  
                    u270 0A18                      u430 097A             __CFG_CPD$OFF 000000  
                    u355 0A94                      u380 08CC                      u390 0922  
                    u447 09D8                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1011 0A14                     l1021 0A48  
                   l1031 0AD8                     l1009 0A08                     l1033 0AE0  
                   l1105 08D2                     l1043 0B00                     l1051 0B22  
                   l1053 0B2A                     l1109 091A                     l1127 09BA  
                   l1081 085E                     l1059 0B42                     l1075 0848  
                   l1085 0864                     l1087 0886                     l1079 0858  
                   l1097 08A2                     STR_1 082B                     _LATC 000F8B  
            main@periodo 003C                     _main 093C                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001          __end_of___lldiv 0A68          __end_of___lwdiv 0B14  
        __end_of___lwmod 0B56                    _RCREG 000FAE                    _SPBRG 000FAF  
          __CFG_USBDIV$1 000000                    _TXREG 000FAD            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 0818                    _putch 0B56  
                  tablat 000FF5                    status 000FD8           __CFG_ICPRT$OFF 000000  
            ?_USART_Init 000E          __initialization 0B62             __end_of_main 09E6  
                 ??_main 001A            __activetblptr 000002                   ?_putch 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??___lldiv 0009  
              ??___lwdiv 0005                ??___lwmod 000C                   _printf 083E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8      __size_of_USART_Init 005A               __accesstop 0060  
__end_of__initialization 0B62          __CFG_PBADEN$OFF 000000          __CFG_FOSC$XT_XT 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 0B62  
                ??_putch 0001                  ?_printf 000D          __CFG_VREGEN$OFF 000000  
           ??_USART_Init 0016                  __Hparam 0000                  __Lparam 0000  
                ___lldiv 09E6                  ___lwdiv 0AC2                  ___lwmod 0B14  
           __psmallconst 0800           USART_Init@BAUD 0012                  __pcinit 0B62  
         USART_Init@FOSC 000E                  __ramtop 0800                  __ptext0 093C  
                __ptext1 083E                  __ptext2 0B56                  __ptext3 0B14  
                __ptext4 0AC2                  __ptext5 0A68                  __ptext6 09E6  
        __size_of_printf 00FE                  _dpowers 080E       __end_of_USART_Init 0AC2  
   end_of_initialization 0B62            __Lmediumconst 0000        __end_ofmain@F3211 082B  
      __end_ofmain@F3213 0822        __end_ofmain@F3215 080E          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                _RCSTAbits 000FAB                  printf@c 0017  
                printf@f 000D                  postdec2 000FDD                  postinc2 000FDE  
              _TRISCbits 000F94                _TXSTAbits 000FAC              _BAUDCONbits 000FB8  
         __end_of_printf 093C      start_initialization 0B62         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0011         ___lwdiv@dividend 0001                 ?___lldiv 0001  
               ?___lwdiv 0001                 ?___lwmod 0008              __smallconst 0800  
       ___lwdiv@quotient 0005           __size_of_putch 000C                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000                main@F3211 0822                main@F3213 0818  
              main@F3215 0801               printf@flag 0011               printf@prec 0016  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lldiv 0082  
       __size_of___lwdiv 0052         __size_of___lwmod 0042          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007            __size_of_main 00AA                 main@led1 0033  
               main@led2 0029                 main@led3 001C                printf@val 0014  
  __CFG_CPUDIV$OSC1_PLL2 000000                putch@data 0001         ___lwmod@dividend 0008  
       ___lldiv@dividend 0001                 printf@ap 0012         ___lldiv@quotient 0009  
        ___lwmod@divisor 000A          ___lwmod@counter 000C               _USART_Init 0A68  
