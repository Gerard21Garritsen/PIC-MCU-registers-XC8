

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun May 31 22:54:33 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 2.05
    35                           ; Generated 20/12/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     _RCREG	set	4014
    69  0000                     _PIR1bits	set	3998
    70  0000                     _TXREG	set	4013
    71  0000                     _RCSTAbits	set	4011
    72  0000                     _SPBRG	set	4015
    73  0000                     _BAUDCONbits	set	4024
    74  0000                     _TXSTAbits	set	4012
    75  0000                     _TRISCbits	set	3988
    76  0000                     _PIR2bits	set	4001
    77  0000                     _EECON2	set	4007
    78  0000                     _INTCONbits	set	4082
    79  0000                     _EECON1bits	set	4006
    80  0000                     _EEDATA	set	4008
    81  0000                     _EEADR	set	4009
    82                           
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	opt callstack 0
    86  000800  00                 	db	0
    87  000801                     STR_1:
    88  000801  45                 	db	69	;'E'
    89  000802  6C                 	db	108	;'l'
    90  000803  20                 	db	32
    91  000804  64                 	db	100	;'d'
    92  000805  61                 	db	97	;'a'
    93  000806  74                 	db	116	;'t'
    94  000807  6F                 	db	111	;'o'
    95  000808  20                 	db	32
    96  000809  65                 	db	101	;'e'
    97  00080A  6E                 	db	110	;'n'
    98  00080B  74                 	db	116	;'t'
    99  00080C  65                 	db	101	;'e'
   100  00080D  72                 	db	114	;'r'
   101  00080E  6F                 	db	111	;'o'
   102  00080F  20                 	db	32
   103  000810  61                 	db	97	;'a'
   104  000811  6C                 	db	108	;'l'
   105  000812  6D                 	db	109	;'m'
   106  000813  61                 	db	97	;'a'
   107  000814  63                 	db	99	;'c'
   108  000815  65                 	db	101	;'e'
   109  000816  6E                 	db	110	;'n'
   110  000817  61                 	db	97	;'a'
   111  000818  64                 	db	100	;'d'
   112  000819  6F                 	db	111	;'o'
   113  00081A  20                 	db	32
   114  00081B  65                 	db	101	;'e'
   115  00081C  73                 	db	115	;'s'
   116  00081D  3A                 	db	58	;':'
   117  00081E  20                 	db	32
   118  00081F  25                 	db	37
   119  000820  64                 	db	100	;'d'
   120  000821  0A                 	db	10
   121  000822  0D                 	db	13
   122  000823  00                 	db	0
   123                           
   124                           ; #config settings
   125  000824  00                 	db	0	; dummy byte at the end
   126  0000                     
   127                           	psect	cinit
   128  0012C2                     __pcinit:
   129                           	opt callstack 0
   130  0012C2                     start_initialization:
   131                           	opt callstack 0
   132  0012C2                     __initialization:
   133                           	opt callstack 0
   134                           
   135                           ; Clear objects allocated to BANK0 (40 bytes)
   136  0012C2  EE00  F060         	lfsr	0,__pbssBANK0
   137  0012C6  0E28               	movlw	40
   138  0012C8                     clear_0:
   139  0012C8  6AEE               	clrf	postinc0,c
   140  0012CA  06E8               	decf	wreg,f,c
   141  0012CC  E1FD               	bnz	clear_0
   142  0012CE                     end_of_initialization:
   143                           	opt callstack 0
   144  0012CE                     __end_of__initialization:
   145                           	opt callstack 0
   146  0012CE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   147  0012D0  6EF8               	movwf	tblptru,c
   148  0012D2  0E08               	movlw	high __Lsmallconst
   149  0012D4  6EF7               	movwf	tblptrh,c
   150  0012D6  0100               	movlb	0
   151  0012D8  EF2D  F007         	goto	_main	;jump to C main() function
   152                           
   153                           	psect	bssBANK0
   154  000060                     __pbssBANK0:
   155                           	opt callstack 0
   156  000060                     _nout:
   157                           	opt callstack 0
   158  000060                     	ds	2
   159  000062                     _width:
   160                           	opt callstack 0
   161  000062                     	ds	2
   162  000064                     _prec:
   163                           	opt callstack 0
   164  000064                     	ds	2
   165  000066                     _flags:
   166                           	opt callstack 0
   167  000066                     	ds	2
   168  000068                     _dbuf:
   169                           	opt callstack 0
   170  000068                     	ds	32
   171                           
   172                           	psect	cstackBANK0
   173  000088                     __pcstackBANK0:
   174                           	opt callstack 0
   175  000088                     	ds	2
   176  00008A                     printf@ap:
   177                           	opt callstack 0
   178                           
   179                           ; 2 bytes @ 0x2
   180  00008A                     	ds	6
   181  000090                     main@dec:
   182                           	opt callstack 0
   183                           
   184                           ; 4 bytes @ 0x8
   185  000090                     	ds	6
   186  000096                     main@dato1:
   187                           	opt callstack 0
   188                           
   189                           ; 2 bytes @ 0xE
   190  000096                     	ds	2
   191                           
   192                           	psect	cstackCOMRAM
   193  000001                     __pcstackCOMRAM:
   194                           	opt callstack 0
   195  000001                     ?_strlen:
   196                           	opt callstack 0
   197  000001                     ?___lldiv:
   198                           	opt callstack 0
   199  000001                     ?___aodiv:
   200                           	opt callstack 0
   201  000001                     ?___aomod:
   202                           	opt callstack 0
   203  000001                     EEPROM_Write@dato:
   204                           	opt callstack 0
   205  000001                     EEPROM_Read@address:
   206                           	opt callstack 0
   207  000001                     putch@dato:
   208                           	opt callstack 0
   209  000001                     strlen@s:
   210                           	opt callstack 0
   211  000001                     ___lldiv@dividend:
   212                           	opt callstack 0
   213  000001                     ___aodiv@dividend:
   214                           	opt callstack 0
   215  000001                     ___aomod@dividend:
   216                           	opt callstack 0
   217                           
   218                           ; 8 bytes @ 0x0
   219  000001                     	ds	1
   220  000002                     EEPROM_Write@address:
   221                           	opt callstack 0
   222  000002                     EEPROM_Read@Data:
   223                           	opt callstack 0
   224  000002                     fputc@c:
   225                           	opt callstack 0
   226                           
   227                           ; 2 bytes @ 0x1
   228  000002                     	ds	1
   229  000003                     ?_EEPROM_Read_Integer:
   230                           	opt callstack 0
   231  000003                     ?_EEPROM_Read_Float:
   232                           	opt callstack 0
   233  000003                     EEPROM_Write_Integer@data:
   234                           	opt callstack 0
   235  000003                     strlen@a:
   236                           	opt callstack 0
   237  000003                     EEPROM_Write_Float@data:
   238                           	opt callstack 0
   239                           
   240                           ; 4 bytes @ 0x2
   241  000003                     	ds	1
   242  000004                     fputc@fp:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0x3
   246  000004                     	ds	1
   247  000005                     EEPROM_Write_Integer@address:
   248                           	opt callstack 0
   249  000005                     EEPROM_Read_Integer@address:
   250                           	opt callstack 0
   251  000005                     ___lldiv@divisor:
   252                           	opt callstack 0
   253                           
   254                           ; 4 bytes @ 0x4
   255  000005                     	ds	1
   256  000006                     ??_fputc:
   257  000006                     EEPROM_Write_Integer@i:
   258                           	opt callstack 0
   259  000006                     EEPROM_Read_Integer@data:
   260                           	opt callstack 0
   261                           
   262                           ; 2 bytes @ 0x5
   263  000006                     	ds	1
   264  000007                     EEPROM_Write_Float@address:
   265                           	opt callstack 0
   266  000007                     EEPROM_Read_Float@address:
   267                           	opt callstack 0
   268                           
   269                           ; 1 bytes @ 0x6
   270  000007                     	ds	1
   271  000008                     EEPROM_Write_Float@i:
   272                           	opt callstack 0
   273  000008                     EEPROM_Read_Integer@i:
   274                           	opt callstack 0
   275  000008                     EEPROM_Read_Float@data:
   276                           	opt callstack 0
   277                           
   278                           ; 4 bytes @ 0x7
   279  000008                     	ds	1
   280  000009                     ___lldiv@quotient:
   281                           	opt callstack 0
   282  000009                     ___aodiv@divisor:
   283                           	opt callstack 0
   284  000009                     ___aomod@divisor:
   285                           	opt callstack 0
   286                           
   287                           ; 8 bytes @ 0x8
   288  000009                     	ds	2
   289  00000B                     fputs@s:
   290                           	opt callstack 0
   291                           
   292                           ; 2 bytes @ 0xA
   293  00000B                     	ds	1
   294  00000C                     EEPROM_Read_Float@i:
   295                           	opt callstack 0
   296                           
   297                           ; 1 bytes @ 0xB
   298  00000C                     	ds	1
   299  00000D                     ___lldiv@counter:
   300                           	opt callstack 0
   301  00000D                     fputs@fp:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0xC
   305  00000D                     	ds	1
   306  00000E                     USART_Init@FOSC:
   307                           	opt callstack 0
   308                           
   309                           ; 4 bytes @ 0xD
   310  00000E                     	ds	1
   311  00000F                     fputs@c:
   312                           	opt callstack 0
   313                           
   314                           ; 1 bytes @ 0xE
   315  00000F                     	ds	1
   316  000010                     fputs@i:
   317                           	opt callstack 0
   318                           
   319                           ; 2 bytes @ 0xF
   320  000010                     	ds	1
   321  000011                     ___aodiv@counter:
   322                           	opt callstack 0
   323  000011                     ___aomod@counter:
   324                           	opt callstack 0
   325                           
   326                           ; 1 bytes @ 0x10
   327  000011                     	ds	1
   328  000012                     ?_pad:
   329                           	opt callstack 0
   330  000012                     ___aodiv@sign:
   331                           	opt callstack 0
   332  000012                     ___aomod@sign:
   333                           	opt callstack 0
   334  000012                     pad@fp:
   335                           	opt callstack 0
   336  000012                     USART_Init@BAUD:
   337                           	opt callstack 0
   338                           
   339                           ; 4 bytes @ 0x11
   340  000012                     	ds	1
   341  000013                     ?_abs:
   342                           	opt callstack 0
   343  000013                     abs@a:
   344                           	opt callstack 0
   345  000013                     ___aodiv@quotient:
   346                           	opt callstack 0
   347                           
   348                           ; 8 bytes @ 0x12
   349  000013                     	ds	1
   350  000014                     pad@buf:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0x13
   354  000014                     	ds	1
   355  000015                     ??_abs:
   356                           
   357                           ; 1 bytes @ 0x14
   358  000015                     	ds	1
   359  000016                     ??_USART_Init:
   360  000016                     pad@p:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x15
   364  000016                     	ds	2
   365  000018                     ??_pad:
   366                           
   367                           ; 1 bytes @ 0x17
   368  000018                     	ds	1
   369  000019                     pad@i:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x18
   373  000019                     	ds	2
   374  00001B                     pad@w:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378  00001B                     	ds	2
   379  00001D                     ?_dtoa:
   380                           	opt callstack 0
   381  00001D                     dtoa@fp:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x1C
   385  00001D                     	ds	2
   386  00001F                     dtoa@d:
   387                           	opt callstack 0
   388                           
   389                           ; 8 bytes @ 0x1E
   390  00001F                     	ds	8
   391  000027                     ??_dtoa:
   392                           
   393                           ; 1 bytes @ 0x26
   394  000027                     	ds	8
   395  00002F                     _dtoa$551:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x2E
   399  00002F                     	ds	2
   400  000031                     dtoa@p:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x30
   404  000031                     	ds	2
   405  000033                     dtoa@w:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0x32
   409  000033                     	ds	2
   410  000035                     dtoa@s:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x34
   414  000035                     	ds	2
   415  000037                     dtoa@n:
   416                           	opt callstack 0
   417                           
   418                           ; 8 bytes @ 0x36
   419  000037                     	ds	8
   420  00003F                     dtoa@i:
   421                           	opt callstack 0
   422                           
   423                           ; 2 bytes @ 0x3E
   424  00003F                     	ds	2
   425  000041                     ?_vfpfcnvrt:
   426                           	opt callstack 0
   427  000041                     vfpfcnvrt@fp:
   428                           	opt callstack 0
   429                           
   430                           ; 2 bytes @ 0x40
   431  000041                     	ds	2
   432  000043                     vfpfcnvrt@fmt:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x42
   436  000043                     	ds	2
   437  000045                     vfpfcnvrt@ap:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x44
   441  000045                     	ds	2
   442  000047                     ??_vfpfcnvrt:
   443                           
   444                           ; 1 bytes @ 0x46
   445  000047                     	ds	2
   446  000049                     vfpfcnvrt@ll:
   447                           	opt callstack 0
   448                           
   449                           ; 8 bytes @ 0x48
   450  000049                     	ds	8
   451  000051                     ?_vfprintf:
   452                           	opt callstack 0
   453  000051                     vfprintf@fp:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x50
   457  000051                     	ds	2
   458  000053                     vfprintf@fmt:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x52
   462  000053                     	ds	2
   463  000055                     vfprintf@ap:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x54
   467  000055                     	ds	2
   468  000057                     vfprintf@cfmt:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x56
   472  000057                     	ds	2
   473  000059                     ?_printf:
   474                           	opt callstack 0
   475  000059                     printf@fmt:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x58
   479  000059                     	ds	4
   480  00005D                     ??_main:
   481                           
   482                           ; 1 bytes @ 0x5C
   483  00005D                     	ds	2
   484                           
   485 ;;
   486 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   487 ;;
   488 ;; *************** function _main *****************
   489 ;; Defined at:
   490 ;;		line 9 in file "Main.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;		None
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  dec             4    8[BANK0 ] float 
   495 ;;  dato2           4    0        float 
   496 ;;  dato1           2   14[BANK0 ] int 
   497 ;;  dato            2    0        int 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   507 ;;      Params:         0       0       0       0       0       0       0       0       0
   508 ;;      Locals:         0      12       0       0       0       0       0       0       0
   509 ;;      Temps:          2       0       0       0       0       0       0       0       0
   510 ;;      Totals:         2      12       0       0       0       0       0       0       0
   511 ;;Total ram usage:       14 bytes
   512 ;; Hardware stack levels required when called:    8
   513 ;; This function calls:
   514 ;;		_EEPROM_Read_Float
   515 ;;		_EEPROM_Read_Integer
   516 ;;		_EEPROM_Write_Float
   517 ;;		_EEPROM_Write_Integer
   518 ;;		_USART_Init
   519 ;;		_printf
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           	psect	text0
   526  000E5A                     __ptext0:
   527                           	opt callstack 0
   528  000E5A                     _main:
   529                           	opt callstack 23
   530                           
   531                           ;Main.c: 11:     float dec = 3.141592;
   532                           
   533                           ;incstack = 0
   534  000E5A  0ED8               	movlw	216
   535  000E5C  0100               	movlb	0	; () banked
   536  000E5E  6F90               	movwf	main@dec& (0+255),b
   537  000E60  0E0F               	movlw	15
   538  000E62  6F91               	movwf	(main@dec+1)& (0+255),b
   539  000E64  0E49               	movlw	73
   540  000E66  6F92               	movwf	(main@dec+2)& (0+255),b
   541  000E68  0E40               	movlw	64
   542  000E6A  6F93               	movwf	(main@dec+3)& (0+255),b
   543                           
   544                           ; BSR set to: 0
   545                           ;Main.c: 12:     int dato1;;Main.c: 13:     float dato2;;Main.c: 14:     USART_Init(4000
      +                          000,9600);
   546  000E6C  0E00               	movlw	0
   547  000E6E  6E0E               	movwf	USART_Init@FOSC,c
   548  000E70  0E09               	movlw	9
   549  000E72  6E0F               	movwf	USART_Init@FOSC+1,c
   550  000E74  0E3D               	movlw	61
   551  000E76  6E10               	movwf	USART_Init@FOSC+2,c
   552  000E78  0E00               	movlw	0
   553  000E7A  6E11               	movwf	USART_Init@FOSC+3,c
   554  000E7C  0E80               	movlw	128
   555  000E7E  6E12               	movwf	USART_Init@BAUD,c
   556  000E80  0E25               	movlw	37
   557  000E82  6E13               	movwf	USART_Init@BAUD+1,c
   558  000E84  0E00               	movlw	0
   559  000E86  6E14               	movwf	USART_Init@BAUD+2,c
   560  000E88  0E00               	movlw	0
   561  000E8A  6E15               	movwf	USART_Init@BAUD+3,c
   562  000E8C  EC3E  F008         	call	_USART_Init	;wreg free
   563                           
   564                           ;Main.c: 16:     EEPROM_Write_Integer(0x00,dato);
   565  000E90  0E64               	movlw	100
   566  000E92  6E04               	movwf	EEPROM_Write_Integer@data+1,c
   567  000E94  0EA8               	movlw	168
   568  000E96  6E03               	movwf	EEPROM_Write_Integer@data,c
   569  000E98  0E00               	movlw	0
   570  000E9A  EC26  F009         	call	_EEPROM_Write_Integer
   571                           
   572                           ;Main.c: 17:     EEPROM_Write_Float(0x02,dec);
   573  000E9E  C090  F003         	movff	main@dec,EEPROM_Write_Float@data
   574  000EA2  C091  F004         	movff	main@dec+1,EEPROM_Write_Float@data+1
   575  000EA6  C092  F005         	movff	main@dec+2,EEPROM_Write_Float@data+2
   576  000EAA  C093  F006         	movff	main@dec+3,EEPROM_Write_Float@data+3
   577  000EAE  0E02               	movlw	2
   578  000EB0  EC3A  F009         	call	_EEPROM_Write_Float
   579                           
   580                           ;Main.c: 18:     dato1 = EEPROM_Read_Integer(0x00);
   581  000EB4  0E00               	movlw	0
   582  000EB6  ECE6  F008         	call	_EEPROM_Read_Integer
   583  000EBA  C003  F096         	movff	?_EEPROM_Read_Integer,main@dato1
   584  000EBE  C004  F097         	movff	?_EEPROM_Read_Integer+1,main@dato1+1
   585  000EC2  0E02               	movlw	2
   586  000EC4  ECB2  F008         	call	_EEPROM_Read_Float
   587  000EC8                     l1686:
   588                           
   589                           ;Main.c: 24:         printf("El dato entero almacenado es: %d\n\r",dato1);
   590  000EC8  0E01               	movlw	low STR_1
   591  000ECA  6E59               	movwf	printf@fmt,c
   592  000ECC  0E08               	movlw	high STR_1
   593  000ECE  6E5A               	movwf	printf@fmt+1,c
   594  000ED0  C096  F05B         	movff	main@dato1,?_printf+2
   595  000ED4  C097  F05C         	movff	main@dato1+1,?_printf+3
   596  000ED8  EC12  F009         	call	_printf	;wreg free
   597                           
   598                           ;Main.c: 25:         _delay((unsigned long)((500)*(4E6/4000.0)));
   599  000EDC  0E03               	movlw	3
   600  000EDE  6E5E               	movwf	(??_main+1)& (0+255),c
   601  000EE0  0E8A               	movlw	138
   602  000EE2  6E5D               	movwf	??_main& (0+255),c
   603  000EE4  0E56               	movlw	86
   604  000EE6                     u1127:
   605  000EE6  2EE8               	decfsz	wreg,f,c
   606  000EE8  D7FE               	bra	u1127
   607  000EEA  2E5D               	decfsz	??_main& (0+255),f,c
   608  000EEC  D7FC               	bra	u1127
   609  000EEE  2E5E               	decfsz	(??_main+1)& (0+255),f,c
   610  000EF0  D7FA               	bra	u1127
   611  000EF2  D7EA               	goto	l1686
   612  000EF4                     __end_of_main:
   613                           	opt callstack 0
   614                           
   615 ;; *************** function _printf *****************
   616 ;; Defined at:
   617 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  fmt             2   88[COMRAM] PTR const unsigned char 
   620 ;;		 -> STR_1(35), 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  ap              2    2[BANK0 ] PTR void [1]
   623 ;;		 -> ?_printf(2), 
   624 ;;  ret             2    0        int 
   625 ;; Return value:  Size  Location     Type
   626 ;;                  2   88[COMRAM] int 
   627 ;; Registers used:
   628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   634 ;;      Params:         4       0       0       0       0       0       0       0       0
   635 ;;      Locals:         0       4       0       0       0       0       0       0       0
   636 ;;      Temps:          0       0       0       0       0       0       0       0       0
   637 ;;      Totals:         4       4       0       0       0       0       0       0       0
   638 ;;Total ram usage:        8 bytes
   639 ;; Hardware stack levels used:    1
   640 ;; Hardware stack levels required when called:    7
   641 ;; This function calls:
   642 ;;		_vfprintf
   643 ;; This function is called by:
   644 ;;		_main
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text1
   649  001224                     __ptext1:
   650                           	opt callstack 0
   651  001224                     _printf:
   652                           	opt callstack 23
   653                           
   654                           ;incstack = 0
   655  001224  0E5B               	movlw	low (?_printf+2)
   656  001226  0100               	movlb	0	; () banked
   657  001228  6F8A               	movwf	printf@ap& (0+255),b
   658  00122A  0E00               	movlw	high (?_printf+2)
   659  00122C  6F8B               	movwf	(printf@ap+1)& (0+255),b
   660                           
   661                           ; BSR set to: 0
   662  00122E  0E00               	movlw	0
   663  001230  6E51               	movwf	vfprintf@fp,c
   664  001232  0E00               	movlw	0
   665  001234  6E52               	movwf	vfprintf@fp+1,c
   666  001236  C059  F053         	movff	printf@fmt,vfprintf@fmt
   667  00123A  C05A  F054         	movff	printf@fmt+1,vfprintf@fmt+1
   668  00123E  0E8A               	movlw	low printf@ap
   669  001240  6E55               	movwf	vfprintf@ap,c
   670  001242  0E00               	movlw	high printf@ap
   671  001244  6E56               	movwf	vfprintf@ap+1,c
   672  001246  EC6B  F008         	call	_vfprintf	;wreg free
   673  00124A  0012               	return		;funcret
   674  00124C                     __end_of_printf:
   675                           	opt callstack 0
   676                           
   677 ;; *************** function _vfprintf *****************
   678 ;; Defined at:
   679 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
   682 ;;		 -> NULL(0), 
   683 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
   684 ;;		 -> STR_1(35), 
   685 ;;  ap              2   84[COMRAM] PTR PTR void 
   686 ;;		 -> printf@ap(2), 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
   689 ;;		 -> STR_1(35), 
   690 ;; Return value:  Size  Location     Type
   691 ;;                  2   80[COMRAM] int 
   692 ;; Registers used:
   693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   699 ;;      Params:         6       0       0       0       0       0       0       0       0
   700 ;;      Locals:         2       0       0       0       0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0
   702 ;;      Totals:         8       0       0       0       0       0       0       0       0
   703 ;;Total ram usage:        8 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    6
   706 ;; This function calls:
   707 ;;		_vfpfcnvrt
   708 ;; This function is called by:
   709 ;;		_printf
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           	psect	text2
   714  0010D6                     __ptext2:
   715                           	opt callstack 0
   716  0010D6                     _vfprintf:
   717                           	opt callstack 23
   718                           
   719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   720                           
   721                           ;incstack = 0
   722  0010D6  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
   723  0010DA  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   724                           
   725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   726  0010DE  0E00               	movlw	0
   727  0010E0  0100               	movlb	0	; () banked
   728  0010E2  6F61               	movwf	(_nout+1)& (0+255),b
   729  0010E4  0E00               	movlw	0
   730  0010E6  6F60               	movwf	_nout& (0+255),b
   731                           
   732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   733  0010E8  D013               	goto	l1586
   734  0010EA                     l1584:
   735                           
   736                           ; BSR set to: 0
   737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   738  0010EA  C051  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
   739  0010EE  C052  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   740  0010F2  0E57               	movlw	low vfprintf@cfmt
   741  0010F4  6E43               	movwf	vfpfcnvrt@fmt,c
   742  0010F6  0E00               	movlw	high vfprintf@cfmt
   743  0010F8  6E44               	movwf	vfpfcnvrt@fmt+1,c
   744  0010FA  C055  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
   745  0010FE  C056  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   746  001102  EC36  F005         	call	_vfpfcnvrt	;wreg free
   747  001106  5041               	movf	?_vfpfcnvrt,w,c
   748  001108  0100               	movlb	0	; () banked
   749  00110A  2760               	addwf	_nout& (0+255),f,b
   750  00110C  5042               	movf	?_vfpfcnvrt+1,w,c
   751  00110E  2361               	addwfc	(_nout+1)& (0+255),f,b
   752  001110                     l1586:
   753                           
   754                           ; BSR set to: 0
   755                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   756  001110  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
   757  001114  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   758  001118                     	if	0	;tblptru may be non-zero
   759  001118                     	endif
   760  001118                     	if	0	;tblptru may be non-zero
   761  001118                     	endif
   762  001118  0008               	tblrd		*
   763  00111A  50F5               	movf	tablat,w,c
   764  00111C  0900               	iorlw	0
   765  00111E  A4D8               	btfss	status,2,c
   766  001120  D7E4               	goto	l1584
   767                           
   768                           ; BSR set to: 0
   769                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   770  001122  C060  F051         	movff	_nout,?_vfprintf
   771  001126  C061  F052         	movff	_nout+1,?_vfprintf+1
   772                           
   773                           ; BSR set to: 0
   774  00112A  0012               	return		;funcret
   775  00112C                     __end_of_vfprintf:
   776                           	opt callstack 0
   777                           
   778 ;; *************** function _vfpfcnvrt *****************
   779 ;; Defined at:
   780 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
   783 ;;		 -> NULL(0), 
   784 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
   785 ;;		 -> vfprintf@cfmt(2), 
   786 ;;  ap              2   68[COMRAM] PTR PTR void 
   787 ;;		 -> printf@ap(2), 
   788 ;; Auto vars:     Size  Location     Type
   789 ;;  ll              8   72[COMRAM] long long 
   790 ;;  llu             8    0        unsigned long long 
   791 ;;  f               4    0        unsigned long long 
   792 ;;  vp              3    0        PTR void 
   793 ;;  ct              3    0        unsigned char [3]
   794 ;;  cp              3    0        PTR unsigned char 
   795 ;;  i               2    0        int 
   796 ;;  done            2    0        int 
   797 ;;  c               1    0        unsigned char 
   798 ;; Return value:  Size  Location     Type
   799 ;;                  2   64[COMRAM] int 
   800 ;; Registers used:
   801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   807 ;;      Params:         6       0       0       0       0       0       0       0       0
   808 ;;      Locals:         8       0       0       0       0       0       0       0       0
   809 ;;      Temps:          2       0       0       0       0       0       0       0       0
   810 ;;      Totals:        16       0       0       0       0       0       0       0       0
   811 ;;Total ram usage:       16 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    5
   814 ;; This function calls:
   815 ;;		_dtoa
   816 ;;		_fputc
   817 ;; This function is called by:
   818 ;;		_vfprintf
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text3
   823  000A6C                     __ptext3:
   824                           	opt callstack 0
   825  000A6C                     _vfpfcnvrt:
   826                           	opt callstack 23
   827                           
   828                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   829                           
   830                           ; BSR set to: 0
   831                           ;incstack = 0
   832  000A6C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   833  000A70  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   834  000A74  CFDE FFF6          	movff	postinc2,tblptrl
   835  000A78  CFDD FFF7          	movff	postdec2,tblptrh
   836  000A7C                     	if	0	;tblptru may be non-zero
   837  000A7C                     	endif
   838  000A7C                     	if	0	;tblptru may be non-zero
   839  000A7C                     	endif
   840  000A7C  0008               	tblrd		*
   841  000A7E  50F5               	movf	tablat,w,c
   842  000A80  0A25               	xorlw	37
   843  000A82  A4D8               	btfss	status,2,c
   844  000A84  D09A               	goto	l1538
   845                           
   846                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   847  000A86  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   848  000A8A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   849  000A8E  2ADE               	incf	postinc2,f,c
   850  000A90  0E00               	movlw	0
   851  000A92  22DD               	addwfc	postdec2,f,c
   852                           
   853                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   854  000A94  0E00               	movlw	0
   855  000A96  0100               	movlb	0	; () banked
   856  000A98  6F63               	movwf	(_width+1)& (0+255),b
   857  000A9A  0E00               	movlw	0
   858  000A9C  6F62               	movwf	_width& (0+255),b
   859  000A9E  C062  F066         	movff	_width,_flags
   860  000AA2  C063  F067         	movff	_width+1,_flags+1
   861                           
   862                           ; BSR set to: 0
   863                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   864  000AA6  6964               	setf	_prec& (0+255),b
   865  000AA8  6965               	setf	(_prec+1)& (0+255),b
   866                           
   867                           ; BSR set to: 0
   868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   869  000AAA  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   870  000AAE  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   871  000AB2  CFDE FFF6          	movff	postinc2,tblptrl
   872  000AB6  CFDD FFF7          	movff	postdec2,tblptrh
   873  000ABA                     	if	0	;tblptru may be non-zero
   874  000ABA                     	endif
   875  000ABA                     	if	0	;tblptru may be non-zero
   876  000ABA                     	endif
   877  000ABA  0008               	tblrd		*
   878  000ABC  50F5               	movf	tablat,w,c
   879  000ABE  0A64               	xorlw	100
   880  000AC0  B4D8               	btfsc	status,2,c
   881  000AC2  D00D               	goto	u1000
   882                           
   883                           ; BSR set to: 0
   884  000AC4  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   885  000AC8  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   886  000ACC  CFDE FFF6          	movff	postinc2,tblptrl
   887  000AD0  CFDD FFF7          	movff	postdec2,tblptrh
   888  000AD4                     	if	0	;tblptru may be non-zero
   889  000AD4                     	endif
   890  000AD4                     	if	0	;tblptru may be non-zero
   891  000AD4                     	endif
   892  000AD4  0008               	tblrd		*
   893  000AD6  50F5               	movf	tablat,w,c
   894  000AD8  0A69               	xorlw	105
   895  000ADA  A4D8               	btfss	status,2,c
   896  000ADC  D03F               	goto	l1522
   897  000ADE                     u1000:
   898                           
   899                           ; BSR set to: 0
   900                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
   901  000ADE  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   902  000AE2  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   903  000AE6  2ADE               	incf	postinc2,f,c
   904  000AE8  0E00               	movlw	0
   905  000AEA  22DD               	addwfc	postdec2,f,c
   906                           
   907                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   908  000AEC  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   909  000AF0  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   910  000AF4  CFDF F047          	movff	indf2,??_vfpfcnvrt
   911  000AF8  0E02               	movlw	2
   912  000AFA  26DE               	addwf	postinc2,f,c
   913  000AFC  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
   914  000B00  0E00               	movlw	0
   915  000B02  22DD               	addwfc	postdec2,f,c
   916  000B04  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
   917  000B08  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   918  000B0C  CFDE F049          	movff	postinc2,vfpfcnvrt@ll
   919  000B10  CFDD F04A          	movff	postdec2,vfpfcnvrt@ll+1
   920  000B14  0E00               	movlw	0
   921  000B16  BE4A               	btfsc	vfpfcnvrt@ll+1,7,c
   922  000B18  0EFF               	movlw	-1
   923  000B1A  6E4B               	movwf	vfpfcnvrt@ll+2,c
   924  000B1C  6E4C               	movwf	vfpfcnvrt@ll+3,c
   925  000B1E  6E4D               	movwf	vfpfcnvrt@ll+4,c
   926  000B20  6E4E               	movwf	vfpfcnvrt@ll+5,c
   927  000B22  6E4F               	movwf	vfpfcnvrt@ll+6,c
   928  000B24  6E50               	movwf	vfpfcnvrt@ll+7,c
   929                           
   930                           ; BSR set to: 0
   931                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
   932  000B26  C041  F01D         	movff	vfpfcnvrt@fp,dtoa@fp
   933  000B2A  C042  F01E         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   934  000B2E  C049  F01F         	movff	vfpfcnvrt@ll,dtoa@d
   935  000B32  C04A  F020         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   936  000B36  C04B  F021         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   937  000B3A  C04C  F022         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   938  000B3E  C04D  F023         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   939  000B42  C04E  F024         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   940  000B46  C04F  F025         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   941  000B4A  C050  F026         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   942  000B4E  EC13  F004         	call	_dtoa	;wreg free
   943  000B52  C01D  F041         	movff	?_dtoa,?_vfpfcnvrt
   944  000B56  C01E  F042         	movff	?_dtoa+1,?_vfpfcnvrt+1
   945  000B5A  0012               	return	
   946  000B5C                     l1522:
   947                           
   948                           ; BSR set to: 0
   949                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   950  000B5C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   951  000B60  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   952  000B64  CFDE FFF6          	movff	postinc2,tblptrl
   953  000B68  CFDD FFF7          	movff	postdec2,tblptrh
   954  000B6C                     	if	0	;tblptru may be non-zero
   955  000B6C                     	endif
   956  000B6C                     	if	0	;tblptru may be non-zero
   957  000B6C                     	endif
   958  000B6C  0008               	tblrd		*
   959  000B6E  50F5               	movf	tablat,w,c
   960  000B70  0A25               	xorlw	37
   961  000B72  A4D8               	btfss	status,2,c
   962  000B74  D016               	goto	l1532
   963                           
   964                           ; BSR set to: 0
   965                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   966  000B76  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   967  000B7A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   968  000B7E  2ADE               	incf	postinc2,f,c
   969  000B80  0E00               	movlw	0
   970  000B82  22DD               	addwfc	postdec2,f,c
   971                           
   972                           ; BSR set to: 0
   973                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   974  000B84  0E00               	movlw	0
   975  000B86  6E03               	movwf	fputc@c+1,c
   976  000B88  0E25               	movlw	37
   977  000B8A  6E02               	movwf	fputc@c,c
   978  000B8C  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
   979  000B90  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   980  000B94  EC08  F008         	call	_fputc	;wreg free
   981  000B98                     l1528:
   982                           
   983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   984  000B98  0E00               	movlw	0
   985  000B9A  6E42               	movwf	?_vfpfcnvrt+1,c
   986  000B9C  0E01               	movlw	1
   987  000B9E  6E41               	movwf	?_vfpfcnvrt,c
   988  000BA0  0012               	return	
   989  000BA2                     l1532:
   990                           
   991                           ; BSR set to: 0
   992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   993  000BA2  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   994  000BA6  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   995  000BAA  2ADE               	incf	postinc2,f,c
   996  000BAC  0E00               	movlw	0
   997  000BAE  22DD               	addwfc	postdec2,f,c
   998                           
   999                           ; BSR set to: 0
  1000                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1001  000BB0  0E00               	movlw	0
  1002  000BB2  6E42               	movwf	?_vfpfcnvrt+1,c
  1003  000BB4  0E00               	movlw	0
  1004  000BB6  6E41               	movwf	?_vfpfcnvrt,c
  1005  000BB8  0012               	return	
  1006  000BBA                     l1538:
  1007                           
  1008                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1009  000BBA  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1010  000BBE  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1011  000BC2  CFDE FFF6          	movff	postinc2,tblptrl
  1012  000BC6  CFDD FFF7          	movff	postdec2,tblptrh
  1013  000BCA                     	if	0	;tblptru may be non-zero
  1014  000BCA                     	endif
  1015  000BCA                     	if	0	;tblptru may be non-zero
  1016  000BCA                     	endif
  1017  000BCA  0008               	tblrd		*
  1018  000BCC  50F5               	movf	tablat,w,c
  1019  000BCE  6E02               	movwf	fputc@c,c
  1020  000BD0  6A03               	clrf	fputc@c+1,c
  1021  000BD2  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1022  000BD6  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1023  000BDA  EC08  F008         	call	_fputc	;wreg free
  1024                           
  1025                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1026  000BDE  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1027  000BE2  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1028  000BE6  2ADE               	incf	postinc2,f,c
  1029  000BE8  0E00               	movlw	0
  1030  000BEA  22DD               	addwfc	postdec2,f,c
  1031  000BEC  D7D5               	goto	l1528
  1032  000BEE                     __end_of_vfpfcnvrt:
  1033                           	opt callstack 0
  1034                           
  1035 ;; *************** function _dtoa *****************
  1036 ;; Defined at:
  1037 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
  1040 ;;		 -> NULL(0), 
  1041 ;;  d               8   30[COMRAM] long long 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  n               8   54[COMRAM] long long 
  1044 ;;  i               2   62[COMRAM] int 
  1045 ;;  s               2   52[COMRAM] int 
  1046 ;;  w               2   50[COMRAM] int 
  1047 ;;  p               2   48[COMRAM] int 
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  2   28[COMRAM] int 
  1050 ;; Registers used:
  1051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1057 ;;      Params:        10       0       0       0       0       0       0       0       0
  1058 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1059 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1060 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1061 ;;Total ram usage:       36 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    4
  1064 ;; This function calls:
  1065 ;;		___aodiv
  1066 ;;		___aomod
  1067 ;;		_abs
  1068 ;;		_pad
  1069 ;; This function is called by:
  1070 ;;		_vfpfcnvrt
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text4
  1075  000826                     __ptext4:
  1076                           	opt callstack 0
  1077  000826                     _dtoa:
  1078                           	opt callstack 23
  1079                           
  1080                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1081                           
  1082                           ;incstack = 0
  1083  000826  C01F  F037         	movff	dtoa@d,dtoa@n
  1084  00082A  C020  F038         	movff	dtoa@d+1,dtoa@n+1
  1085  00082E  C021  F039         	movff	dtoa@d+2,dtoa@n+2
  1086  000832  C022  F03A         	movff	dtoa@d+3,dtoa@n+3
  1087  000836  C023  F03B         	movff	dtoa@d+4,dtoa@n+4
  1088  00083A  C024  F03C         	movff	dtoa@d+5,dtoa@n+5
  1089  00083E  C025  F03D         	movff	dtoa@d+6,dtoa@n+6
  1090  000842  C026  F03E         	movff	dtoa@d+7,dtoa@n+7
  1091                           
  1092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1093  000846  AE3E               	btfss	dtoa@n+7,7,c
  1094  000848  D002               	goto	u830
  1095  00084A  0E01               	movlw	1
  1096  00084C  D001               	goto	u840
  1097  00084E                     u830:
  1098  00084E  0E00               	movlw	0
  1099  000850                     u840:
  1100  000850  6E35               	movwf	dtoa@s,c
  1101  000852  6A36               	clrf	dtoa@s+1,c
  1102                           
  1103                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1104  000854  5035               	movf	dtoa@s,w,c
  1105  000856  1036               	iorwf	dtoa@s+1,w,c
  1106  000858  B4D8               	btfsc	status,2,c
  1107  00085A  D010               	goto	l1448
  1108                           
  1109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1110  00085C  1E3E               	comf	dtoa@n+7,f,c
  1111  00085E  1E3D               	comf	dtoa@n+6,f,c
  1112  000860  1E3C               	comf	dtoa@n+5,f,c
  1113  000862  1E3B               	comf	dtoa@n+4,f,c
  1114  000864  1E3A               	comf	dtoa@n+3,f,c
  1115  000866  1E39               	comf	dtoa@n+2,f,c
  1116  000868  1E38               	comf	dtoa@n+1,f,c
  1117  00086A  6C37               	negf	dtoa@n,c
  1118  00086C  0E00               	movlw	0
  1119  00086E  2238               	addwfc	dtoa@n+1,f,c
  1120  000870  2239               	addwfc	dtoa@n+2,f,c
  1121  000872  223A               	addwfc	dtoa@n+3,f,c
  1122  000874  223B               	addwfc	dtoa@n+4,f,c
  1123  000876  223C               	addwfc	dtoa@n+5,f,c
  1124  000878  223D               	addwfc	dtoa@n+6,f,c
  1125  00087A  223E               	addwfc	dtoa@n+7,f,c
  1126  00087C                     l1448:
  1127                           
  1128                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1129  00087C  0100               	movlb	0	; () banked
  1130  00087E  AF65               	btfss	(_prec+1)& (0+255),7,b
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1134  000880  9366               	bcf	_flags& (0+255),1,b
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1138  000882  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1139  000884  D005               	goto	u870
  1140  000886  5165               	movf	(_prec+1)& (0+255),w,b
  1141  000888  E108               	bnz	l146
  1142  00088A  0564               	decf	_prec& (0+255),w,b
  1143  00088C  B0D8               	btfsc	status,0,c
  1144  00088E  D005               	goto	l146
  1145  000890                     u870:
  1146                           
  1147                           ; BSR set to: 0
  1148  000890  0E00               	movlw	0
  1149  000892  6E32               	movwf	dtoa@p+1,c
  1150  000894  0E01               	movlw	1
  1151  000896  6E31               	movwf	dtoa@p,c
  1152  000898  D004               	goto	l148
  1153  00089A                     l146:
  1154                           
  1155                           ; BSR set to: 0
  1156  00089A  C064  F031         	movff	_prec,dtoa@p
  1157  00089E  C065  F032         	movff	_prec+1,dtoa@p+1
  1158  0008A2                     l148:
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1162  0008A2  C062  F033         	movff	_width,dtoa@w
  1163  0008A6  C063  F034         	movff	_width+1,dtoa@w+1
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1167  0008AA  5035               	movf	dtoa@s,w,c
  1168  0008AC  1036               	iorwf	dtoa@s+1,w,c
  1169  0008AE  A4D8               	btfss	status,2,c
  1170  0008B0  D002               	goto	u890
  1171                           
  1172                           ; BSR set to: 0
  1173  0008B2  A566               	btfss	_flags& (0+255),2,b
  1174  0008B4  D003               	goto	l1462
  1175  0008B6                     u890:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1179  0008B6  0633               	decf	dtoa@w,f,c
  1180  0008B8  A0D8               	btfss	status,0,c
  1181  0008BA  0634               	decf	dtoa@w+1,f,c
  1182  0008BC                     l1462:
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1186  0008BC  0E00               	movlw	0
  1187  0008BE  6E40               	movwf	dtoa@i+1,c
  1188  0008C0  0E1F               	movlw	31
  1189  0008C2  6E3F               	movwf	dtoa@i,c
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1193  0008C4  0E00               	movlw	0
  1194  0008C6  6F87               	movwf	(_dbuf+31)& (0+255),b
  1195                           
  1196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1197  0008C8  D07C               	goto	l1476
  1198  0008CA                     l1466:
  1199                           
  1200                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1201  0008CA  063F               	decf	dtoa@i,f,c
  1202  0008CC  A0D8               	btfss	status,0,c
  1203  0008CE  0640               	decf	dtoa@i+1,f,c
  1204                           
  1205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1206  0008D0  0E68               	movlw	low _dbuf
  1207  0008D2  243F               	addwf	dtoa@i,w,c
  1208  0008D4  6ED9               	movwf	fsr2l,c
  1209  0008D6  0E00               	movlw	high _dbuf
  1210  0008D8  2040               	addwfc	dtoa@i+1,w,c
  1211  0008DA  6EDA               	movwf	fsr2h,c
  1212  0008DC  C037  F001         	movff	dtoa@n,___aomod@dividend
  1213  0008E0  C038  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1214  0008E4  C039  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1215  0008E8  C03A  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1216  0008EC  C03B  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1217  0008F0  C03C  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1218  0008F4  C03D  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1219  0008F8  C03E  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1220  0008FC  0E0A               	movlw	10
  1221  0008FE  6E09               	movwf	___aomod@divisor,c
  1222  000900  0E00               	movlw	0
  1223  000902  6E0A               	movwf	___aomod@divisor+1,c
  1224  000904  0E00               	movlw	0
  1225  000906  6E0B               	movwf	___aomod@divisor+2,c
  1226  000908  0E00               	movlw	0
  1227  00090A  6E0C               	movwf	___aomod@divisor+3,c
  1228  00090C  0E00               	movlw	0
  1229  00090E  6E0D               	movwf	___aomod@divisor+4,c
  1230  000910  0E00               	movlw	0
  1231  000912  6E0E               	movwf	___aomod@divisor+5,c
  1232  000914  0E00               	movlw	0
  1233  000916  6E0F               	movwf	___aomod@divisor+6,c
  1234  000918  0E00               	movlw	0
  1235  00091A  6E10               	movwf	___aomod@divisor+7,c
  1236  00091C  EC9B  F006         	call	___aomod	;wreg free
  1237  000920  C001  F027         	movff	?___aomod,??_dtoa
  1238  000924  C002  F028         	movff	?___aomod+1,??_dtoa+1
  1239  000928  C003  F029         	movff	?___aomod+2,??_dtoa+2
  1240  00092C  C004  F02A         	movff	?___aomod+3,??_dtoa+3
  1241  000930  C005  F02B         	movff	?___aomod+4,??_dtoa+4
  1242  000934  C006  F02C         	movff	?___aomod+5,??_dtoa+5
  1243  000938  C007  F02D         	movff	?___aomod+6,??_dtoa+6
  1244  00093C  C008  F02E         	movff	?___aomod+7,??_dtoa+7
  1245  000940  C027  F013         	movff	??_dtoa,abs@a
  1246  000944  C029  F014         	movff	??_dtoa+2,abs@a+1
  1247  000948  ECCD  F008         	call	_abs	;wreg free
  1248  00094C  5013               	movf	?_abs,w,c
  1249  00094E  0F30               	addlw	48
  1250  000950  6EDF               	movwf	indf2,c
  1251                           
  1252                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1253  000952  0631               	decf	dtoa@p,f,c
  1254  000954  A0D8               	btfss	status,0,c
  1255  000956  0632               	decf	dtoa@p+1,f,c
  1256                           
  1257                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1258  000958  0633               	decf	dtoa@w,f,c
  1259  00095A  A0D8               	btfss	status,0,c
  1260  00095C  0634               	decf	dtoa@w+1,f,c
  1261                           
  1262                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1263  00095E  C037  F001         	movff	dtoa@n,___aodiv@dividend
  1264  000962  C038  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1265  000966  C039  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1266  00096A  C03A  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1267  00096E  C03B  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1268  000972  C03C  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1269  000976  C03D  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1270  00097A  C03E  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1271  00097E  0E0A               	movlw	10
  1272  000980  6E09               	movwf	___aodiv@divisor,c
  1273  000982  0E00               	movlw	0
  1274  000984  6E0A               	movwf	___aodiv@divisor+1,c
  1275  000986  0E00               	movlw	0
  1276  000988  6E0B               	movwf	___aodiv@divisor+2,c
  1277  00098A  0E00               	movlw	0
  1278  00098C  6E0C               	movwf	___aodiv@divisor+3,c
  1279  00098E  0E00               	movlw	0
  1280  000990  6E0D               	movwf	___aodiv@divisor+4,c
  1281  000992  0E00               	movlw	0
  1282  000994  6E0E               	movwf	___aodiv@divisor+5,c
  1283  000996  0E00               	movlw	0
  1284  000998  6E0F               	movwf	___aodiv@divisor+6,c
  1285  00099A  0E00               	movlw	0
  1286  00099C  6E10               	movwf	___aodiv@divisor+7,c
  1287  00099E  ECF7  F005         	call	___aodiv	;wreg free
  1288  0009A2  C001  F037         	movff	?___aodiv,dtoa@n
  1289  0009A6  C002  F038         	movff	?___aodiv+1,dtoa@n+1
  1290  0009AA  C003  F039         	movff	?___aodiv+2,dtoa@n+2
  1291  0009AE  C004  F03A         	movff	?___aodiv+3,dtoa@n+3
  1292  0009B2  C005  F03B         	movff	?___aodiv+4,dtoa@n+4
  1293  0009B6  C006  F03C         	movff	?___aodiv+5,dtoa@n+5
  1294  0009BA  C007  F03D         	movff	?___aodiv+6,dtoa@n+6
  1295  0009BE  C008  F03E         	movff	?___aodiv+7,dtoa@n+7
  1296  0009C2                     l1476:
  1297                           
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1299  0009C2  BE40               	btfsc	dtoa@i+1,7,c
  1300  0009C4  D020               	goto	u940
  1301  0009C6  5040               	movf	dtoa@i+1,w,c
  1302  0009C8  E103               	bnz	u900
  1303  0009CA  043F               	decf	dtoa@i,w,c
  1304  0009CC  A0D8               	btfss	status,0,c
  1305  0009CE  D01B               	goto	u940
  1306  0009D0                     u900:
  1307  0009D0  5037               	movf	dtoa@n,w,c
  1308  0009D2  1038               	iorwf	dtoa@n+1,w,c
  1309  0009D4  1039               	iorwf	dtoa@n+2,w,c
  1310  0009D6  103A               	iorwf	dtoa@n+3,w,c
  1311  0009D8  103B               	iorwf	dtoa@n+4,w,c
  1312  0009DA  103C               	iorwf	dtoa@n+5,w,c
  1313  0009DC  103D               	iorwf	dtoa@n+6,w,c
  1314  0009DE  103E               	iorwf	dtoa@n+7,w,c
  1315  0009E0  A4D8               	btfss	status,2,c
  1316  0009E2  D773               	goto	l1466
  1317  0009E4  BE32               	btfsc	dtoa@p+1,7,c
  1318  0009E6  D005               	goto	u920
  1319  0009E8  5032               	movf	dtoa@p+1,w,c
  1320  0009EA  E102               	bnz	u921
  1321  0009EC  0431               	decf	dtoa@p,w,c
  1322  0009EE  B0D8               	btfsc	status,0,c
  1323  0009F0                     u921:
  1324  0009F0  D76C               	goto	l1466
  1325  0009F2                     u920:
  1326  0009F2  BE34               	btfsc	dtoa@w+1,7,c
  1327  0009F4  D008               	goto	u940
  1328  0009F6  5034               	movf	dtoa@w+1,w,c
  1329  0009F8  E103               	bnz	u930
  1330  0009FA  0433               	decf	dtoa@w,w,c
  1331  0009FC  A0D8               	btfss	status,0,c
  1332  0009FE  D003               	goto	u940
  1333  000A00                     u930:
  1334  000A00  0100               	movlb	0	; () banked
  1335  000A02  B366               	btfsc	_flags& (0+255),1,b
  1336  000A04  D762               	goto	l1466
  1337  000A06                     u940:
  1338                           
  1339                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1340  000A06  5035               	movf	dtoa@s,w,c
  1341  000A08  1036               	iorwf	dtoa@s+1,w,c
  1342  000A0A  A4D8               	btfss	status,2,c
  1343  000A0C  D003               	goto	u960
  1344  000A0E  0100               	movlb	0	; () banked
  1345  000A10  A566               	btfss	_flags& (0+255),2,b
  1346  000A12  D017               	goto	l1500
  1347  000A14                     u960:
  1348                           
  1349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1350  000A14  063F               	decf	dtoa@i,f,c
  1351  000A16  A0D8               	btfss	status,0,c
  1352  000A18  0640               	decf	dtoa@i+1,f,c
  1353                           
  1354                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1355  000A1A  5035               	movf	dtoa@s,w,c
  1356  000A1C  1036               	iorwf	dtoa@s+1,w,c
  1357  000A1E  A4D8               	btfss	status,2,c
  1358  000A20  D004               	goto	l1496
  1359  000A22  0E00               	movlw	0
  1360  000A24  6E30               	movwf	_dtoa$551+1,c
  1361  000A26  0E2B               	movlw	43
  1362  000A28  D003               	goto	L1
  1363  000A2A                     l1496:
  1364  000A2A  0E00               	movlw	0
  1365  000A2C  6E30               	movwf	_dtoa$551+1,c
  1366  000A2E  0E2D               	movlw	45
  1367  000A30                     L1:
  1368  000A30  6E2F               	movwf	_dtoa$551,c
  1369  000A32  0E68               	movlw	low _dbuf
  1370  000A34  243F               	addwf	dtoa@i,w,c
  1371  000A36  6ED9               	movwf	fsr2l,c
  1372  000A38  0E00               	movlw	high _dbuf
  1373  000A3A  2040               	addwfc	dtoa@i+1,w,c
  1374  000A3C  6EDA               	movwf	fsr2h,c
  1375  000A3E  C02F  FFDF         	movff	_dtoa$551,indf2
  1376  000A42                     l1500:
  1377                           
  1378                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1379  000A42  C01D  F012         	movff	dtoa@fp,pad@fp
  1380  000A46  C01E  F013         	movff	dtoa@fp+1,pad@fp+1
  1381  000A4A  0E68               	movlw	low _dbuf
  1382  000A4C  243F               	addwf	dtoa@i,w,c
  1383  000A4E  6E14               	movwf	pad@buf,c
  1384  000A50  0E00               	movlw	high _dbuf
  1385  000A52  2040               	addwfc	dtoa@i+1,w,c
  1386  000A54  6E15               	movwf	pad@buf+1,c
  1387  000A56  C033  F016         	movff	dtoa@w,pad@p
  1388  000A5A  C034  F017         	movff	dtoa@w+1,pad@p+1
  1389  000A5E  EC7A  F007         	call	_pad	;wreg free
  1390  000A62  C012  F01D         	movff	?_pad,?_dtoa
  1391  000A66  C013  F01E         	movff	?_pad+1,?_dtoa+1
  1392  000A6A  0012               	return		;funcret
  1393  000A6C                     __end_of_dtoa:
  1394                           	opt callstack 0
  1395                           
  1396 ;; *************** function _pad *****************
  1397 ;; Defined at:
  1398 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1401 ;;		 -> NULL(0), 
  1402 ;;  buf             2   19[COMRAM] PTR unsigned char 
  1403 ;;		 -> dbuf(32), 
  1404 ;;  p               2   21[COMRAM] int 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  w               2   26[COMRAM] int 
  1407 ;;  i               2   24[COMRAM] int 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  2   17[COMRAM] int 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1417 ;;      Params:         6       0       0       0       0       0       0       0       0
  1418 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1419 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1420 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1421 ;;Total ram usage:       11 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    3
  1424 ;; This function calls:
  1425 ;;		_fputc
  1426 ;;		_fputs
  1427 ;;		_strlen
  1428 ;; This function is called by:
  1429 ;;		_dtoa
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           	psect	text5
  1434  000EF4                     __ptext5:
  1435                           	opt callstack 0
  1436  000EF4                     _pad:
  1437                           	opt callstack 23
  1438                           
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1440                           
  1441                           ;incstack = 0
  1442  000EF4  0100               	movlb	0	; () banked
  1443  000EF6  A166               	btfss	_flags& (0+255),0,b
  1444  000EF8  D00A               	goto	l1340
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1448  000EFA  C014  F00B         	movff	pad@buf,fputs@s
  1449  000EFE  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1450  000F02  C012  F00D         	movff	pad@fp,fputs@fp
  1451  000F06  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1452  000F0A  EC96  F008         	call	_fputs	;wreg free
  1453  000F0E                     l1340:
  1454                           
  1455                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1456  000F0E  BE17               	btfsc	pad@p+1,7,c
  1457  000F10  D005               	goto	l1344
  1458  000F12  C016  F01B         	movff	pad@p,pad@w
  1459  000F16  C017  F01C         	movff	pad@p+1,pad@w+1
  1460  000F1A  D004               	goto	l135
  1461  000F1C                     l1344:
  1462  000F1C  0E00               	movlw	0
  1463  000F1E  6E1C               	movwf	pad@w+1,c
  1464  000F20  0E00               	movlw	0
  1465  000F22  6E1B               	movwf	pad@w,c
  1466  000F24                     l135:
  1467                           
  1468                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1469  000F24  0E00               	movlw	0
  1470  000F26  6E1A               	movwf	pad@i+1,c
  1471  000F28  0E00               	movlw	0
  1472  000F2A  6E19               	movwf	pad@i,c
  1473                           
  1474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1475  000F2C  D00C               	goto	l1350
  1476  000F2E                     l1346:
  1477                           
  1478                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1479  000F2E  0E00               	movlw	0
  1480  000F30  6E03               	movwf	fputc@c+1,c
  1481  000F32  0E20               	movlw	32
  1482  000F34  6E02               	movwf	fputc@c,c
  1483  000F36  C012  F004         	movff	pad@fp,fputc@fp
  1484  000F3A  C013  F005         	movff	pad@fp+1,fputc@fp+1
  1485  000F3E  EC08  F008         	call	_fputc	;wreg free
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1488  000F42  4A19               	infsnz	pad@i,f,c
  1489  000F44  2A1A               	incf	pad@i+1,f,c
  1490  000F46                     l1350:
  1491                           
  1492                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1493  000F46  501B               	movf	pad@w,w,c
  1494  000F48  5C19               	subwf	pad@i,w,c
  1495  000F4A  501A               	movf	pad@i+1,w,c
  1496  000F4C  0A80               	xorlw	128
  1497  000F4E  6E18               	movwf	??_pad& (0+255),c
  1498  000F50  501C               	movf	pad@w+1,w,c
  1499  000F52  0A80               	xorlw	128
  1500  000F54  5818               	subwfb	??_pad& (0+255),w,c
  1501  000F56  A0D8               	btfss	status,0,c
  1502  000F58  D7EA               	goto	l1346
  1503                           
  1504                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1505  000F5A  0100               	movlb	0	; () banked
  1506  000F5C  B166               	btfsc	_flags& (0+255),0,b
  1507  000F5E  D00A               	goto	l1354
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1511  000F60  C014  F00B         	movff	pad@buf,fputs@s
  1512  000F64  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1513  000F68  C012  F00D         	movff	pad@fp,fputs@fp
  1514  000F6C  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1515  000F70  EC96  F008         	call	_fputs	;wreg free
  1516  000F74                     l1354:
  1517                           
  1518                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1519  000F74  C014  F001         	movff	pad@buf,strlen@s
  1520  000F78  C015  F002         	movff	pad@buf+1,strlen@s+1
  1521  000F7C  ECFD  F008         	call	_strlen	;wreg free
  1522  000F80  501B               	movf	pad@w,w,c
  1523  000F82  2401               	addwf	?_strlen,w,c
  1524  000F84  6E12               	movwf	?_pad,c
  1525  000F86  501C               	movf	pad@w+1,w,c
  1526  000F88  2002               	addwfc	?_strlen+1,w,c
  1527  000F8A  6E13               	movwf	?_pad+1,c
  1528  000F8C  0012               	return		;funcret
  1529  000F8E                     __end_of_pad:
  1530                           	opt callstack 0
  1531                           
  1532 ;; *************** function _strlen *****************
  1533 ;; Defined at:
  1534 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1537 ;;		 -> dbuf(32), 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1540 ;;		 -> dbuf(32), 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  2    0[COMRAM] unsigned int 
  1543 ;; Registers used:
  1544 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1550 ;;      Params:         2       0       0       0       0       0       0       0       0
  1551 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1553 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1554 ;;Total ram usage:        4 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_pad
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text6
  1564  0011FA                     __ptext6:
  1565                           	opt callstack 0
  1566  0011FA                     _strlen:
  1567                           	opt callstack 25
  1568                           
  1569                           ;incstack = 0
  1570  0011FA  C001  F003         	movff	strlen@s,strlen@a
  1571  0011FE  C002  F004         	movff	strlen@s+1,strlen@a+1
  1572  001202  D002               	goto	l1330
  1573  001204                     l1328:
  1574  001204  4A01               	infsnz	strlen@s,f,c
  1575  001206  2A02               	incf	strlen@s+1,f,c
  1576  001208                     l1330:
  1577  001208  C001  FFD9         	movff	strlen@s,fsr2l
  1578  00120C  C002  FFDA         	movff	strlen@s+1,fsr2h
  1579  001210  50DF               	movf	indf2,w,c
  1580  001212  A4D8               	btfss	status,2,c
  1581  001214  D7F7               	goto	l1328
  1582  001216  5003               	movf	strlen@a,w,c
  1583  001218  5C01               	subwf	strlen@s,w,c
  1584  00121A  6E01               	movwf	?_strlen,c
  1585  00121C  5004               	movf	strlen@a+1,w,c
  1586  00121E  5802               	subwfb	strlen@s+1,w,c
  1587  001220  6E02               	movwf	?_strlen+1,c
  1588  001222  0012               	return		;funcret
  1589  001224                     __end_of_strlen:
  1590                           	opt callstack 0
  1591                           
  1592 ;; *************** function _fputs *****************
  1593 ;; Defined at:
  1594 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  s               2   10[COMRAM] PTR const unsigned char 
  1597 ;;		 -> dbuf(32), 
  1598 ;;  fp              2   12[COMRAM] PTR struct _IO_FILE
  1599 ;;		 -> NULL(0), 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  i               2   15[COMRAM] int 
  1602 ;;  c               1   14[COMRAM] unsigned char 
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  2   10[COMRAM] int 
  1605 ;; Registers used:
  1606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1612 ;;      Params:         4       0       0       0       0       0       0       0       0
  1613 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1615 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1616 ;;Total ram usage:        7 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    2
  1619 ;; This function calls:
  1620 ;;		_fputc
  1621 ;; This function is called by:
  1622 ;;		_pad
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text7
  1627  00112C                     __ptext7:
  1628                           	opt callstack 0
  1629  00112C                     _fputs:
  1630                           	opt callstack 23
  1631                           
  1632                           ;incstack = 0
  1633  00112C  0E00               	movlw	0
  1634  00112E  6E11               	movwf	fputs@i+1,c
  1635  001130  0E00               	movlw	0
  1636  001132  6E10               	movwf	fputs@i,c
  1637  001134  D00B               	goto	l1324
  1638  001136                     l1320:
  1639  001136  C00F  F002         	movff	fputs@c,fputc@c
  1640  00113A  6A03               	clrf	fputc@c+1,c
  1641  00113C  C00D  F004         	movff	fputs@fp,fputc@fp
  1642  001140  C00E  F005         	movff	fputs@fp+1,fputc@fp+1
  1643  001144  EC08  F008         	call	_fputc	;wreg free
  1644  001148  4A10               	infsnz	fputs@i,f,c
  1645  00114A  2A11               	incf	fputs@i+1,f,c
  1646  00114C                     l1324:
  1647  00114C  5010               	movf	fputs@i,w,c
  1648  00114E  240B               	addwf	fputs@s,w,c
  1649  001150  6ED9               	movwf	fsr2l,c
  1650  001152  5011               	movf	fputs@i+1,w,c
  1651  001154  200C               	addwfc	fputs@s+1,w,c
  1652  001156  6EDA               	movwf	fsr2h,c
  1653  001158  50DF               	movf	indf2,w,c
  1654  00115A  6E0F               	movwf	fputs@c,c
  1655  00115C  500F               	movf	fputs@c,w,c
  1656  00115E  B4D8               	btfsc	status,2,c
  1657  001160  0012               	return	
  1658  001162  D7E9               	goto	l1320
  1659  001164                     __end_of_fputs:
  1660                           	opt callstack 0
  1661                           
  1662 ;; *************** function _fputc *****************
  1663 ;; Defined at:
  1664 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  c               2    1[COMRAM] int 
  1667 ;;  fp              2    3[COMRAM] PTR struct _IO_FILE
  1668 ;;		 -> NULL(0), 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  2    1[COMRAM] int 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1680 ;;      Params:         4       0       0       0       0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1682 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1683 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1684 ;;Total ram usage:        9 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    1
  1687 ;; This function calls:
  1688 ;;		_putch
  1689 ;; This function is called by:
  1690 ;;		_pad
  1691 ;;		_vfpfcnvrt
  1692 ;;		_fputs
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text8
  1697  001010                     __ptext8:
  1698                           	opt callstack 0
  1699  001010                     _fputc:
  1700                           	opt callstack 26
  1701                           
  1702                           ;incstack = 0
  1703  001010  5004               	movf	fputc@fp,w,c
  1704  001012  1005               	iorwf	fputc@fp+1,w,c
  1705  001014  B4D8               	btfsc	status,2,c
  1706  001016  D004               	goto	u600
  1707  001018  5004               	movf	fputc@fp,w,c
  1708  00101A  1005               	iorwf	fputc@fp+1,w,c
  1709  00101C  A4D8               	btfss	status,2,c
  1710  00101E  D004               	goto	l1310
  1711  001020                     u600:
  1712  001020  5002               	movf	fputc@c,w,c
  1713  001022  EC78  F009         	call	_putch
  1714  001026  0012               	return	
  1715  001028                     l1310:
  1716  001028  EE20 F004          	lfsr	2,4
  1717  00102C  5004               	movf	fputc@fp,w,c
  1718  00102E  26D9               	addwf	fsr2l,f,c
  1719  001030  5005               	movf	fputc@fp+1,w,c
  1720  001032  22DA               	addwfc	fsr2h,f,c
  1721  001034  50DE               	movf	postinc2,w,c
  1722  001036  10DE               	iorwf	postinc2,w,c
  1723  001038  B4D8               	btfsc	status,2,c
  1724  00103A  D016               	goto	u620
  1725  00103C  EE20 F004          	lfsr	2,4
  1726  001040  5004               	movf	fputc@fp,w,c
  1727  001042  26D9               	addwf	fsr2l,f,c
  1728  001044  5005               	movf	fputc@fp+1,w,c
  1729  001046  22DA               	addwfc	fsr2h,f,c
  1730  001048  EE10 F002          	lfsr	1,2
  1731  00104C  5004               	movf	fputc@fp,w,c
  1732  00104E  26E1               	addwf	fsr1l,f,c
  1733  001050  5005               	movf	fputc@fp+1,w,c
  1734  001052  22E2               	addwfc	fsr1h,f,c
  1735  001054  50DE               	movf	postinc2,w,c
  1736  001056  5CE6               	subwf	postinc1,w,c
  1737  001058  50E6               	movf	postinc1,w,c
  1738  00105A  0A80               	xorlw	128
  1739  00105C  6E0A               	movwf	(??_fputc+4)& (0+255),c
  1740  00105E  50DE               	movf	postinc2,w,c
  1741  001060  0A80               	xorlw	128
  1742  001062  580A               	subwfb	(??_fputc+4)& (0+255),w,c
  1743  001064  B0D8               	btfsc	status,0,c
  1744  001066  0012               	return	
  1745  001068                     u620:
  1746  001068  EE20 F002          	lfsr	2,2
  1747  00106C  5004               	movf	fputc@fp,w,c
  1748  00106E  26D9               	addwf	fsr2l,f,c
  1749  001070  5005               	movf	fputc@fp+1,w,c
  1750  001072  22DA               	addwfc	fsr2h,f,c
  1751  001074  2ADE               	incf	postinc2,f,c
  1752  001076  0E00               	movlw	0
  1753  001078  22DD               	addwfc	postdec2,f,c
  1754  00107A  0012               	return		;funcret
  1755  00107C                     __end_of_fputc:
  1756                           	opt callstack 0
  1757                           
  1758 ;; *************** function _putch *****************
  1759 ;; Defined at:
  1760 ;;		line 29 in file "USART.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;  dato            1    wreg     unsigned char 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  dato            1    0[COMRAM] unsigned char 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1774 ;;      Params:         0       0       0       0       0       0       0       0       0
  1775 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1777 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1778 ;;Total ram usage:        1 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_fputc
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text9
  1788  0012F0                     __ptext9:
  1789                           	opt callstack 0
  1790  0012F0                     _putch:
  1791                           	opt callstack 26
  1792                           
  1793                           ;incstack = 0
  1794                           ;putch@dato stored from wreg
  1795  0012F0  6E01               	movwf	putch@dato,c
  1796  0012F2                     
  1797                           ;USART.c: 30:     while(TXSTAbits.TRMT == 0);
  1798  0012F2  A2AC               	btfss	4012,1,c	;volatile
  1799  0012F4  D7FE               	goto	l1300
  1800                           
  1801                           ;USART.c: 31:     TXREG = dato;
  1802  0012F6  C001  FFAD         	movff	putch@dato,4013	;volatile
  1803  0012FA  0012               	return		;funcret
  1804  0012FC                     __end_of_putch:
  1805                           	opt callstack 0
  1806                           
  1807 ;; *************** function _abs *****************
  1808 ;; Defined at:
  1809 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  a               2   18[COMRAM] int 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  2   18[COMRAM] int 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1823 ;;      Params:         2       0       0       0       0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1825 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1826 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1827 ;;Total ram usage:        4 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		_dtoa
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text10
  1837  00119A                     __ptext10:
  1838                           	opt callstack 0
  1839  00119A                     _abs:
  1840                           	opt callstack 26
  1841                           
  1842                           ;incstack = 0
  1843  00119A  BE14               	btfsc	abs@a+1,7,c
  1844  00119C  D005               	goto	u690
  1845  00119E  5014               	movf	abs@a+1,w,c
  1846  0011A0  E110               	bnz	l858
  1847  0011A2  0413               	decf	abs@a,w,c
  1848  0011A4  B0D8               	btfsc	status,0,c
  1849  0011A6  D00D               	goto	l858
  1850  0011A8                     u690:
  1851  0011A8  C013  F015         	movff	abs@a,??_abs
  1852  0011AC  C014  F016         	movff	abs@a+1,??_abs+1
  1853  0011B0  1E15               	comf	??_abs,f,c
  1854  0011B2  1E16               	comf	??_abs+1,f,c
  1855  0011B4  4A15               	infsnz	??_abs,f,c
  1856  0011B6  2A16               	incf	??_abs+1,f,c
  1857  0011B8  C015  F013         	movff	??_abs,?_abs
  1858  0011BC  C016  F014         	movff	??_abs+1,?_abs+1
  1859  0011C0  0012               	return	
  1860  0011C2                     l858:
  1861  0011C2  C013  F013         	movff	abs@a,?_abs
  1862  0011C6  C014  F014         	movff	abs@a+1,?_abs+1
  1863  0011CA  0012               	return		;funcret
  1864  0011CC                     __end_of_abs:
  1865                           	opt callstack 0
  1866                           
  1867 ;; *************** function ___aomod *****************
  1868 ;; Defined at:
  1869 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  dividend        8    0[COMRAM] long long 
  1872 ;;  divisor         8    8[COMRAM] long long 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  sign            1   17[COMRAM] unsigned char 
  1875 ;;  counter         1   16[COMRAM] unsigned char 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  8    0[COMRAM] long long 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1885 ;;      Params:        16       0       0       0       0       0       0       0       0
  1886 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1888 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1889 ;;Total ram usage:       18 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_dtoa
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text11
  1899  000D36                     __ptext11:
  1900                           	opt callstack 0
  1901  000D36                     ___aomod:
  1902                           	opt callstack 26
  1903                           
  1904                           ;incstack = 0
  1905  000D36  0E00               	movlw	0
  1906  000D38  6E12               	movwf	___aomod@sign,c
  1907  000D3A  AE08               	btfss	___aomod@dividend+7,7,c
  1908  000D3C  D012               	goto	l1414
  1909  000D3E  1E08               	comf	___aomod@dividend+7,f,c
  1910  000D40  1E07               	comf	___aomod@dividend+6,f,c
  1911  000D42  1E06               	comf	___aomod@dividend+5,f,c
  1912  000D44  1E05               	comf	___aomod@dividend+4,f,c
  1913  000D46  1E04               	comf	___aomod@dividend+3,f,c
  1914  000D48  1E03               	comf	___aomod@dividend+2,f,c
  1915  000D4A  1E02               	comf	___aomod@dividend+1,f,c
  1916  000D4C  6C01               	negf	___aomod@dividend,c
  1917  000D4E  0E00               	movlw	0
  1918  000D50  2202               	addwfc	___aomod@dividend+1,f,c
  1919  000D52  2203               	addwfc	___aomod@dividend+2,f,c
  1920  000D54  2204               	addwfc	___aomod@dividend+3,f,c
  1921  000D56  2205               	addwfc	___aomod@dividend+4,f,c
  1922  000D58  2206               	addwfc	___aomod@dividend+5,f,c
  1923  000D5A  2207               	addwfc	___aomod@dividend+6,f,c
  1924  000D5C  2208               	addwfc	___aomod@dividend+7,f,c
  1925  000D5E  0E01               	movlw	1
  1926  000D60  6E12               	movwf	___aomod@sign,c
  1927  000D62                     l1414:
  1928  000D62  AE10               	btfss	___aomod@divisor+7,7,c
  1929  000D64  D010               	goto	l1418
  1930  000D66  1E10               	comf	___aomod@divisor+7,f,c
  1931  000D68  1E0F               	comf	___aomod@divisor+6,f,c
  1932  000D6A  1E0E               	comf	___aomod@divisor+5,f,c
  1933  000D6C  1E0D               	comf	___aomod@divisor+4,f,c
  1934  000D6E  1E0C               	comf	___aomod@divisor+3,f,c
  1935  000D70  1E0B               	comf	___aomod@divisor+2,f,c
  1936  000D72  1E0A               	comf	___aomod@divisor+1,f,c
  1937  000D74  6C09               	negf	___aomod@divisor,c
  1938  000D76  0E00               	movlw	0
  1939  000D78  220A               	addwfc	___aomod@divisor+1,f,c
  1940  000D7A  220B               	addwfc	___aomod@divisor+2,f,c
  1941  000D7C  220C               	addwfc	___aomod@divisor+3,f,c
  1942  000D7E  220D               	addwfc	___aomod@divisor+4,f,c
  1943  000D80  220E               	addwfc	___aomod@divisor+5,f,c
  1944  000D82  220F               	addwfc	___aomod@divisor+6,f,c
  1945  000D84  2210               	addwfc	___aomod@divisor+7,f,c
  1946  000D86                     l1418:
  1947  000D86  5009               	movf	___aomod@divisor,w,c
  1948  000D88  100A               	iorwf	___aomod@divisor+1,w,c
  1949  000D8A  100B               	iorwf	___aomod@divisor+2,w,c
  1950  000D8C  100C               	iorwf	___aomod@divisor+3,w,c
  1951  000D8E  100D               	iorwf	___aomod@divisor+4,w,c
  1952  000D90  100E               	iorwf	___aomod@divisor+5,w,c
  1953  000D92  100F               	iorwf	___aomod@divisor+6,w,c
  1954  000D94  1010               	iorwf	___aomod@divisor+7,w,c
  1955  000D96  B4D8               	btfsc	status,2,c
  1956  000D98  D03C               	goto	l1434
  1957  000D9A  0E01               	movlw	1
  1958  000D9C  6E11               	movwf	___aomod@counter,c
  1959  000D9E  D00A               	goto	l1424
  1960  000DA0                     l1422:
  1961  000DA0  90D8               	bcf	status,0,c
  1962  000DA2  3609               	rlcf	___aomod@divisor,f,c
  1963  000DA4  360A               	rlcf	___aomod@divisor+1,f,c
  1964  000DA6  360B               	rlcf	___aomod@divisor+2,f,c
  1965  000DA8  360C               	rlcf	___aomod@divisor+3,f,c
  1966  000DAA  360D               	rlcf	___aomod@divisor+4,f,c
  1967  000DAC  360E               	rlcf	___aomod@divisor+5,f,c
  1968  000DAE  360F               	rlcf	___aomod@divisor+6,f,c
  1969  000DB0  3610               	rlcf	___aomod@divisor+7,f,c
  1970  000DB2  2A11               	incf	___aomod@counter,f,c
  1971  000DB4                     l1424:
  1972  000DB4  AE10               	btfss	___aomod@divisor+7,7,c
  1973  000DB6  D7F4               	goto	l1422
  1974  000DB8                     u800:
  1975  000DB8  5009               	movf	___aomod@divisor,w,c
  1976  000DBA  5C01               	subwf	___aomod@dividend,w,c
  1977  000DBC  500A               	movf	___aomod@divisor+1,w,c
  1978  000DBE  5802               	subwfb	___aomod@dividend+1,w,c
  1979  000DC0  500B               	movf	___aomod@divisor+2,w,c
  1980  000DC2  5803               	subwfb	___aomod@dividend+2,w,c
  1981  000DC4  500C               	movf	___aomod@divisor+3,w,c
  1982  000DC6  5804               	subwfb	___aomod@dividend+3,w,c
  1983  000DC8  500D               	movf	___aomod@divisor+4,w,c
  1984  000DCA  5805               	subwfb	___aomod@dividend+4,w,c
  1985  000DCC  500E               	movf	___aomod@divisor+5,w,c
  1986  000DCE  5806               	subwfb	___aomod@dividend+5,w,c
  1987  000DD0  500F               	movf	___aomod@divisor+6,w,c
  1988  000DD2  5807               	subwfb	___aomod@dividend+6,w,c
  1989  000DD4  5010               	movf	___aomod@divisor+7,w,c
  1990  000DD6  5808               	subwfb	___aomod@dividend+7,w,c
  1991  000DD8  A0D8               	btfss	status,0,c
  1992  000DDA  D010               	goto	l1430
  1993  000DDC  5009               	movf	___aomod@divisor,w,c
  1994  000DDE  5E01               	subwf	___aomod@dividend,f,c
  1995  000DE0  500A               	movf	___aomod@divisor+1,w,c
  1996  000DE2  5A02               	subwfb	___aomod@dividend+1,f,c
  1997  000DE4  500B               	movf	___aomod@divisor+2,w,c
  1998  000DE6  5A03               	subwfb	___aomod@dividend+2,f,c
  1999  000DE8  500C               	movf	___aomod@divisor+3,w,c
  2000  000DEA  5A04               	subwfb	___aomod@dividend+3,f,c
  2001  000DEC  500D               	movf	___aomod@divisor+4,w,c
  2002  000DEE  5A05               	subwfb	___aomod@dividend+4,f,c
  2003  000DF0  500E               	movf	___aomod@divisor+5,w,c
  2004  000DF2  5A06               	subwfb	___aomod@dividend+5,f,c
  2005  000DF4  500F               	movf	___aomod@divisor+6,w,c
  2006  000DF6  5A07               	subwfb	___aomod@dividend+6,f,c
  2007  000DF8  5010               	movf	___aomod@divisor+7,w,c
  2008  000DFA  5A08               	subwfb	___aomod@dividend+7,f,c
  2009  000DFC                     l1430:
  2010  000DFC  90D8               	bcf	status,0,c
  2011  000DFE  3210               	rrcf	___aomod@divisor+7,f,c
  2012  000E00  320F               	rrcf	___aomod@divisor+6,f,c
  2013  000E02  320E               	rrcf	___aomod@divisor+5,f,c
  2014  000E04  320D               	rrcf	___aomod@divisor+4,f,c
  2015  000E06  320C               	rrcf	___aomod@divisor+3,f,c
  2016  000E08  320B               	rrcf	___aomod@divisor+2,f,c
  2017  000E0A  320A               	rrcf	___aomod@divisor+1,f,c
  2018  000E0C  3209               	rrcf	___aomod@divisor,f,c
  2019  000E0E  2E11               	decfsz	___aomod@counter,f,c
  2020  000E10  D7D3               	goto	u800
  2021  000E12                     l1434:
  2022  000E12  5012               	movf	___aomod@sign,w,c
  2023  000E14  B4D8               	btfsc	status,2,c
  2024  000E16  D010               	goto	l1438
  2025  000E18  1E08               	comf	___aomod@dividend+7,f,c
  2026  000E1A  1E07               	comf	___aomod@dividend+6,f,c
  2027  000E1C  1E06               	comf	___aomod@dividend+5,f,c
  2028  000E1E  1E05               	comf	___aomod@dividend+4,f,c
  2029  000E20  1E04               	comf	___aomod@dividend+3,f,c
  2030  000E22  1E03               	comf	___aomod@dividend+2,f,c
  2031  000E24  1E02               	comf	___aomod@dividend+1,f,c
  2032  000E26  6C01               	negf	___aomod@dividend,c
  2033  000E28  0E00               	movlw	0
  2034  000E2A  2202               	addwfc	___aomod@dividend+1,f,c
  2035  000E2C  2203               	addwfc	___aomod@dividend+2,f,c
  2036  000E2E  2204               	addwfc	___aomod@dividend+3,f,c
  2037  000E30  2205               	addwfc	___aomod@dividend+4,f,c
  2038  000E32  2206               	addwfc	___aomod@dividend+5,f,c
  2039  000E34  2207               	addwfc	___aomod@dividend+6,f,c
  2040  000E36  2208               	addwfc	___aomod@dividend+7,f,c
  2041  000E38                     l1438:
  2042  000E38  C001  F001         	movff	___aomod@dividend,?___aomod
  2043  000E3C  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2044  000E40  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2045  000E44  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2046  000E48  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2047  000E4C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2048  000E50  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2049  000E54  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2050  000E58  0012               	return		;funcret
  2051  000E5A                     __end_of___aomod:
  2052                           	opt callstack 0
  2053                           
  2054 ;; *************** function ___aodiv *****************
  2055 ;; Defined at:
  2056 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  dividend        8    0[COMRAM] long long 
  2059 ;;  divisor         8    8[COMRAM] long long 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  quotient        8   18[COMRAM] long long 
  2062 ;;  sign            1   17[COMRAM] unsigned char 
  2063 ;;  counter         1   16[COMRAM] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  8    0[COMRAM] long long 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2073 ;;      Params:        16       0       0       0       0       0       0       0       0
  2074 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2076 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2077 ;;Total ram usage:       26 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_dtoa
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text12
  2087  000BEE                     __ptext12:
  2088                           	opt callstack 0
  2089  000BEE                     ___aodiv:
  2090                           	opt callstack 26
  2091                           
  2092                           ;incstack = 0
  2093  000BEE  0E00               	movlw	0
  2094  000BF0  6E12               	movwf	___aodiv@sign,c
  2095  000BF2  AE10               	btfss	___aodiv@divisor+7,7,c
  2096  000BF4  D012               	goto	l1370
  2097  000BF6  1E10               	comf	___aodiv@divisor+7,f,c
  2098  000BF8  1E0F               	comf	___aodiv@divisor+6,f,c
  2099  000BFA  1E0E               	comf	___aodiv@divisor+5,f,c
  2100  000BFC  1E0D               	comf	___aodiv@divisor+4,f,c
  2101  000BFE  1E0C               	comf	___aodiv@divisor+3,f,c
  2102  000C00  1E0B               	comf	___aodiv@divisor+2,f,c
  2103  000C02  1E0A               	comf	___aodiv@divisor+1,f,c
  2104  000C04  6C09               	negf	___aodiv@divisor,c
  2105  000C06  0E00               	movlw	0
  2106  000C08  220A               	addwfc	___aodiv@divisor+1,f,c
  2107  000C0A  220B               	addwfc	___aodiv@divisor+2,f,c
  2108  000C0C  220C               	addwfc	___aodiv@divisor+3,f,c
  2109  000C0E  220D               	addwfc	___aodiv@divisor+4,f,c
  2110  000C10  220E               	addwfc	___aodiv@divisor+5,f,c
  2111  000C12  220F               	addwfc	___aodiv@divisor+6,f,c
  2112  000C14  2210               	addwfc	___aodiv@divisor+7,f,c
  2113  000C16  0E01               	movlw	1
  2114  000C18  6E12               	movwf	___aodiv@sign,c
  2115  000C1A                     l1370:
  2116  000C1A  AE08               	btfss	___aodiv@dividend+7,7,c
  2117  000C1C  D012               	goto	l1376
  2118  000C1E  1E08               	comf	___aodiv@dividend+7,f,c
  2119  000C20  1E07               	comf	___aodiv@dividend+6,f,c
  2120  000C22  1E06               	comf	___aodiv@dividend+5,f,c
  2121  000C24  1E05               	comf	___aodiv@dividend+4,f,c
  2122  000C26  1E04               	comf	___aodiv@dividend+3,f,c
  2123  000C28  1E03               	comf	___aodiv@dividend+2,f,c
  2124  000C2A  1E02               	comf	___aodiv@dividend+1,f,c
  2125  000C2C  6C01               	negf	___aodiv@dividend,c
  2126  000C2E  0E00               	movlw	0
  2127  000C30  2202               	addwfc	___aodiv@dividend+1,f,c
  2128  000C32  2203               	addwfc	___aodiv@dividend+2,f,c
  2129  000C34  2204               	addwfc	___aodiv@dividend+3,f,c
  2130  000C36  2205               	addwfc	___aodiv@dividend+4,f,c
  2131  000C38  2206               	addwfc	___aodiv@dividend+5,f,c
  2132  000C3A  2207               	addwfc	___aodiv@dividend+6,f,c
  2133  000C3C  2208               	addwfc	___aodiv@dividend+7,f,c
  2134  000C3E  0E01               	movlw	1
  2135  000C40  1A12               	xorwf	___aodiv@sign,f,c
  2136  000C42                     l1376:
  2137  000C42  EE20  F013         	lfsr	2,___aodiv@quotient
  2138  000C46  0E07               	movlw	7
  2139  000C48                     u721:
  2140  000C48  6ADE               	clrf	postinc2,c
  2141  000C4A  06E8               	decf	wreg,f,c
  2142  000C4C  E2FD               	bc	u721
  2143  000C4E  5009               	movf	___aodiv@divisor,w,c
  2144  000C50  100A               	iorwf	___aodiv@divisor+1,w,c
  2145  000C52  100B               	iorwf	___aodiv@divisor+2,w,c
  2146  000C54  100C               	iorwf	___aodiv@divisor+3,w,c
  2147  000C56  100D               	iorwf	___aodiv@divisor+4,w,c
  2148  000C58  100E               	iorwf	___aodiv@divisor+5,w,c
  2149  000C5A  100F               	iorwf	___aodiv@divisor+6,w,c
  2150  000C5C  1010               	iorwf	___aodiv@divisor+7,w,c
  2151  000C5E  B4D8               	btfsc	status,2,c
  2152  000C60  D046               	goto	l1398
  2153  000C62  0E01               	movlw	1
  2154  000C64  6E11               	movwf	___aodiv@counter,c
  2155  000C66  D00A               	goto	l1384
  2156  000C68                     l1382:
  2157  000C68  90D8               	bcf	status,0,c
  2158  000C6A  3609               	rlcf	___aodiv@divisor,f,c
  2159  000C6C  360A               	rlcf	___aodiv@divisor+1,f,c
  2160  000C6E  360B               	rlcf	___aodiv@divisor+2,f,c
  2161  000C70  360C               	rlcf	___aodiv@divisor+3,f,c
  2162  000C72  360D               	rlcf	___aodiv@divisor+4,f,c
  2163  000C74  360E               	rlcf	___aodiv@divisor+5,f,c
  2164  000C76  360F               	rlcf	___aodiv@divisor+6,f,c
  2165  000C78  3610               	rlcf	___aodiv@divisor+7,f,c
  2166  000C7A  2A11               	incf	___aodiv@counter,f,c
  2167  000C7C                     l1384:
  2168  000C7C  AE10               	btfss	___aodiv@divisor+7,7,c
  2169  000C7E  D7F4               	goto	l1382
  2170  000C80                     u740:
  2171  000C80  90D8               	bcf	status,0,c
  2172  000C82  3613               	rlcf	___aodiv@quotient,f,c
  2173  000C84  3614               	rlcf	___aodiv@quotient+1,f,c
  2174  000C86  3615               	rlcf	___aodiv@quotient+2,f,c
  2175  000C88  3616               	rlcf	___aodiv@quotient+3,f,c
  2176  000C8A  3617               	rlcf	___aodiv@quotient+4,f,c
  2177  000C8C  3618               	rlcf	___aodiv@quotient+5,f,c
  2178  000C8E  3619               	rlcf	___aodiv@quotient+6,f,c
  2179  000C90  361A               	rlcf	___aodiv@quotient+7,f,c
  2180  000C92  5009               	movf	___aodiv@divisor,w,c
  2181  000C94  5C01               	subwf	___aodiv@dividend,w,c
  2182  000C96  500A               	movf	___aodiv@divisor+1,w,c
  2183  000C98  5802               	subwfb	___aodiv@dividend+1,w,c
  2184  000C9A  500B               	movf	___aodiv@divisor+2,w,c
  2185  000C9C  5803               	subwfb	___aodiv@dividend+2,w,c
  2186  000C9E  500C               	movf	___aodiv@divisor+3,w,c
  2187  000CA0  5804               	subwfb	___aodiv@dividend+3,w,c
  2188  000CA2  500D               	movf	___aodiv@divisor+4,w,c
  2189  000CA4  5805               	subwfb	___aodiv@dividend+4,w,c
  2190  000CA6  500E               	movf	___aodiv@divisor+5,w,c
  2191  000CA8  5806               	subwfb	___aodiv@dividend+5,w,c
  2192  000CAA  500F               	movf	___aodiv@divisor+6,w,c
  2193  000CAC  5807               	subwfb	___aodiv@dividend+6,w,c
  2194  000CAE  5010               	movf	___aodiv@divisor+7,w,c
  2195  000CB0  5808               	subwfb	___aodiv@dividend+7,w,c
  2196  000CB2  A0D8               	btfss	status,0,c
  2197  000CB4  D011               	goto	l1394
  2198  000CB6  5009               	movf	___aodiv@divisor,w,c
  2199  000CB8  5E01               	subwf	___aodiv@dividend,f,c
  2200  000CBA  500A               	movf	___aodiv@divisor+1,w,c
  2201  000CBC  5A02               	subwfb	___aodiv@dividend+1,f,c
  2202  000CBE  500B               	movf	___aodiv@divisor+2,w,c
  2203  000CC0  5A03               	subwfb	___aodiv@dividend+2,f,c
  2204  000CC2  500C               	movf	___aodiv@divisor+3,w,c
  2205  000CC4  5A04               	subwfb	___aodiv@dividend+3,f,c
  2206  000CC6  500D               	movf	___aodiv@divisor+4,w,c
  2207  000CC8  5A05               	subwfb	___aodiv@dividend+4,f,c
  2208  000CCA  500E               	movf	___aodiv@divisor+5,w,c
  2209  000CCC  5A06               	subwfb	___aodiv@dividend+5,f,c
  2210  000CCE  500F               	movf	___aodiv@divisor+6,w,c
  2211  000CD0  5A07               	subwfb	___aodiv@dividend+6,f,c
  2212  000CD2  5010               	movf	___aodiv@divisor+7,w,c
  2213  000CD4  5A08               	subwfb	___aodiv@dividend+7,f,c
  2214  000CD6  8013               	bsf	___aodiv@quotient,0,c
  2215  000CD8                     l1394:
  2216  000CD8  90D8               	bcf	status,0,c
  2217  000CDA  3210               	rrcf	___aodiv@divisor+7,f,c
  2218  000CDC  320F               	rrcf	___aodiv@divisor+6,f,c
  2219  000CDE  320E               	rrcf	___aodiv@divisor+5,f,c
  2220  000CE0  320D               	rrcf	___aodiv@divisor+4,f,c
  2221  000CE2  320C               	rrcf	___aodiv@divisor+3,f,c
  2222  000CE4  320B               	rrcf	___aodiv@divisor+2,f,c
  2223  000CE6  320A               	rrcf	___aodiv@divisor+1,f,c
  2224  000CE8  3209               	rrcf	___aodiv@divisor,f,c
  2225  000CEA  2E11               	decfsz	___aodiv@counter,f,c
  2226  000CEC  D7C9               	goto	u740
  2227  000CEE                     l1398:
  2228  000CEE  5012               	movf	___aodiv@sign,w,c
  2229  000CF0  B4D8               	btfsc	status,2,c
  2230  000CF2  D010               	goto	l1402
  2231  000CF4  1E1A               	comf	___aodiv@quotient+7,f,c
  2232  000CF6  1E19               	comf	___aodiv@quotient+6,f,c
  2233  000CF8  1E18               	comf	___aodiv@quotient+5,f,c
  2234  000CFA  1E17               	comf	___aodiv@quotient+4,f,c
  2235  000CFC  1E16               	comf	___aodiv@quotient+3,f,c
  2236  000CFE  1E15               	comf	___aodiv@quotient+2,f,c
  2237  000D00  1E14               	comf	___aodiv@quotient+1,f,c
  2238  000D02  6C13               	negf	___aodiv@quotient,c
  2239  000D04  0E00               	movlw	0
  2240  000D06  2214               	addwfc	___aodiv@quotient+1,f,c
  2241  000D08  2215               	addwfc	___aodiv@quotient+2,f,c
  2242  000D0A  2216               	addwfc	___aodiv@quotient+3,f,c
  2243  000D0C  2217               	addwfc	___aodiv@quotient+4,f,c
  2244  000D0E  2218               	addwfc	___aodiv@quotient+5,f,c
  2245  000D10  2219               	addwfc	___aodiv@quotient+6,f,c
  2246  000D12  221A               	addwfc	___aodiv@quotient+7,f,c
  2247  000D14                     l1402:
  2248  000D14  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2249  000D18  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2250  000D1C  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2251  000D20  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2252  000D24  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2253  000D28  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2254  000D2C  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2255  000D30  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2256  000D34  0012               	return		;funcret
  2257  000D36                     __end_of___aodiv:
  2258                           	opt callstack 0
  2259                           
  2260 ;; *************** function _USART_Init *****************
  2261 ;; Defined at:
  2262 ;;		line 3 in file "USART.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  FOSC            4   13[COMRAM] unsigned long 
  2265 ;;  BAUD            4   17[COMRAM] unsigned long 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;		None
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, status,2, status,0, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2277 ;;      Params:         8       0       0       0       0       0       0       0       0
  2278 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2279 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2280 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2281 ;;Total ram usage:       12 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    1
  2284 ;; This function calls:
  2285 ;;		___lldiv
  2286 ;; This function is called by:
  2287 ;;		_main
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text13
  2292  00107C                     __ptext13:
  2293                           	opt callstack 0
  2294  00107C                     _USART_Init:
  2295                           	opt callstack 29
  2296                           
  2297                           ;USART.c: 5:     TRISCbits.TRISC6 = 0;
  2298                           
  2299                           ;incstack = 0
  2300  00107C  9C94               	bcf	3988,6,c	;volatile
  2301                           
  2302                           ;USART.c: 6:     TRISCbits.TRISC7 = 1;
  2303  00107E  8E94               	bsf	3988,7,c	;volatile
  2304                           
  2305                           ;USART.c: 8:     TXSTAbits.SYNC = 0;
  2306  001080  98AC               	bcf	4012,4,c	;volatile
  2307                           
  2308                           ;USART.c: 9:     TXSTAbits.BRGH = 1;
  2309  001082  84AC               	bsf	4012,2,c	;volatile
  2310                           
  2311                           ;USART.c: 10:     BAUDCONbits.BRG16 = 0;
  2312  001084  96B8               	bcf	4024,3,c	;volatile
  2313                           
  2314                           ;USART.c: 11:     SPBRG = (unsigned int)(FOSC/(16*BAUD)-1);
  2315  001086  C00E  F001         	movff	USART_Init@FOSC,___lldiv@dividend
  2316  00108A  C00F  F002         	movff	USART_Init@FOSC+1,___lldiv@dividend+1
  2317  00108E  C010  F003         	movff	USART_Init@FOSC+2,___lldiv@dividend+2
  2318  001092  C011  F004         	movff	USART_Init@FOSC+3,___lldiv@dividend+3
  2319  001096  C012  F016         	movff	USART_Init@BAUD,??_USART_Init
  2320  00109A  C013  F017         	movff	USART_Init@BAUD+1,??_USART_Init+1
  2321  00109E  C014  F018         	movff	USART_Init@BAUD+2,??_USART_Init+2
  2322  0010A2  C015  F019         	movff	USART_Init@BAUD+3,??_USART_Init+3
  2323  0010A6  0E04               	movlw	4
  2324  0010A8                     u1075:
  2325  0010A8  90D8               	bcf	status,0,c
  2326  0010AA  3616               	rlcf	??_USART_Init,f,c
  2327  0010AC  3617               	rlcf	??_USART_Init+1,f,c
  2328  0010AE  3618               	rlcf	??_USART_Init+2,f,c
  2329  0010B0  3619               	rlcf	??_USART_Init+3,f,c
  2330  0010B2  2EE8               	decfsz	wreg,f,c
  2331  0010B4  D7F9               	goto	u1075
  2332  0010B6  C016  F005         	movff	??_USART_Init,___lldiv@divisor
  2333  0010BA  C017  F006         	movff	??_USART_Init+1,___lldiv@divisor+1
  2334  0010BE  C018  F007         	movff	??_USART_Init+2,___lldiv@divisor+2
  2335  0010C2  C019  F008         	movff	??_USART_Init+3,___lldiv@divisor+3
  2336  0010C6  ECC7  F007         	call	___lldiv	;wreg free
  2337  0010CA  0401               	decf	?___lldiv,w,c
  2338  0010CC  6EAF               	movwf	4015,c	;volatile
  2339                           
  2340                           ;USART.c: 12:     RCSTAbits.SPEN = 1;
  2341  0010CE  8EAB               	bsf	4011,7,c	;volatile
  2342                           
  2343                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  2344  0010D0  8AAC               	bsf	4012,5,c	;volatile
  2345                           
  2346                           ;USART.c: 14:     RCSTAbits.CREN = 1;
  2347  0010D2  88AB               	bsf	4011,4,c	;volatile
  2348  0010D4  0012               	return		;funcret
  2349  0010D6                     __end_of_USART_Init:
  2350                           	opt callstack 0
  2351                           
  2352 ;; *************** function ___lldiv *****************
  2353 ;; Defined at:
  2354 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  dividend        4    0[COMRAM] unsigned long 
  2357 ;;  divisor         4    4[COMRAM] unsigned long 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  quotient        4    8[COMRAM] unsigned long 
  2360 ;;  counter         1   12[COMRAM] unsigned char 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  4    0[COMRAM] unsigned long 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2, status,0
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2370 ;;      Params:         8       0       0       0       0       0       0       0       0
  2371 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2373 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2374 ;;Total ram usage:       13 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_USART_Init
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text14
  2384  000F8E                     __ptext14:
  2385                           	opt callstack 0
  2386  000F8E                     ___lldiv:
  2387                           	opt callstack 29
  2388                           
  2389                           ;incstack = 0
  2390  000F8E  0E00               	movlw	0
  2391  000F90  6E09               	movwf	___lldiv@quotient,c
  2392  000F92  0E00               	movlw	0
  2393  000F94  6E0A               	movwf	___lldiv@quotient+1,c
  2394  000F96  0E00               	movlw	0
  2395  000F98  6E0B               	movwf	___lldiv@quotient+2,c
  2396  000F9A  0E00               	movlw	0
  2397  000F9C  6E0C               	movwf	___lldiv@quotient+3,c
  2398  000F9E  5005               	movf	___lldiv@divisor,w,c
  2399  000FA0  1006               	iorwf	___lldiv@divisor+1,w,c
  2400  000FA2  1007               	iorwf	___lldiv@divisor+2,w,c
  2401  000FA4  1008               	iorwf	___lldiv@divisor+3,w,c
  2402  000FA6  B4D8               	btfsc	status,2,c
  2403  000FA8  D02A               	goto	l210
  2404  000FAA  0E01               	movlw	1
  2405  000FAC  6E0D               	movwf	___lldiv@counter,c
  2406  000FAE  D006               	goto	l1596
  2407  000FB0                     l1594:
  2408  000FB0  90D8               	bcf	status,0,c
  2409  000FB2  3605               	rlcf	___lldiv@divisor,f,c
  2410  000FB4  3606               	rlcf	___lldiv@divisor+1,f,c
  2411  000FB6  3607               	rlcf	___lldiv@divisor+2,f,c
  2412  000FB8  3608               	rlcf	___lldiv@divisor+3,f,c
  2413  000FBA  2A0D               	incf	___lldiv@counter,f,c
  2414  000FBC                     l1596:
  2415  000FBC  AE08               	btfss	___lldiv@divisor+3,7,c
  2416  000FBE  D7F8               	goto	l1594
  2417  000FC0                     u1050:
  2418  000FC0  90D8               	bcf	status,0,c
  2419  000FC2  3609               	rlcf	___lldiv@quotient,f,c
  2420  000FC4  360A               	rlcf	___lldiv@quotient+1,f,c
  2421  000FC6  360B               	rlcf	___lldiv@quotient+2,f,c
  2422  000FC8  360C               	rlcf	___lldiv@quotient+3,f,c
  2423  000FCA  5005               	movf	___lldiv@divisor,w,c
  2424  000FCC  5C01               	subwf	___lldiv@dividend,w,c
  2425  000FCE  5006               	movf	___lldiv@divisor+1,w,c
  2426  000FD0  5802               	subwfb	___lldiv@dividend+1,w,c
  2427  000FD2  5007               	movf	___lldiv@divisor+2,w,c
  2428  000FD4  5803               	subwfb	___lldiv@dividend+2,w,c
  2429  000FD6  5008               	movf	___lldiv@divisor+3,w,c
  2430  000FD8  5804               	subwfb	___lldiv@dividend+3,w,c
  2431  000FDA  A0D8               	btfss	status,0,c
  2432  000FDC  D009               	goto	l1606
  2433  000FDE  5005               	movf	___lldiv@divisor,w,c
  2434  000FE0  5E01               	subwf	___lldiv@dividend,f,c
  2435  000FE2  5006               	movf	___lldiv@divisor+1,w,c
  2436  000FE4  5A02               	subwfb	___lldiv@dividend+1,f,c
  2437  000FE6  5007               	movf	___lldiv@divisor+2,w,c
  2438  000FE8  5A03               	subwfb	___lldiv@dividend+2,f,c
  2439  000FEA  5008               	movf	___lldiv@divisor+3,w,c
  2440  000FEC  5A04               	subwfb	___lldiv@dividend+3,f,c
  2441  000FEE  8009               	bsf	___lldiv@quotient,0,c
  2442  000FF0                     l1606:
  2443  000FF0  90D8               	bcf	status,0,c
  2444  000FF2  3208               	rrcf	___lldiv@divisor+3,f,c
  2445  000FF4  3207               	rrcf	___lldiv@divisor+2,f,c
  2446  000FF6  3206               	rrcf	___lldiv@divisor+1,f,c
  2447  000FF8  3205               	rrcf	___lldiv@divisor,f,c
  2448  000FFA  2E0D               	decfsz	___lldiv@counter,f,c
  2449  000FFC  D7E1               	goto	u1050
  2450  000FFE                     l210:
  2451  000FFE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2452  001002  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2453  001006  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2454  00100A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2455  00100E  0012               	return		;funcret
  2456  001010                     __end_of___lldiv:
  2457                           	opt callstack 0
  2458                           
  2459 ;; *************** function _EEPROM_Write_Integer *****************
  2460 ;; Defined at:
  2461 ;;		line 21 in file "EEPROM.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  address         1    wreg     unsigned char 
  2464 ;;  data            2    2[COMRAM] short 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  address         1    4[COMRAM] unsigned char 
  2467 ;;  i               1    5[COMRAM] unsigned char 
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      void 
  2470 ;; Registers used:
  2471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2477 ;;      Params:         2       0       0       0       0       0       0       0       0
  2478 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2479 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2480 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2481 ;;Total ram usage:        4 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; Hardware stack levels required when called:    1
  2484 ;; This function calls:
  2485 ;;		_EEPROM_Write
  2486 ;; This function is called by:
  2487 ;;		_main
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           	psect	text15
  2492  00124C                     __ptext15:
  2493                           	opt callstack 0
  2494  00124C                     _EEPROM_Write_Integer:
  2495                           	opt callstack 29
  2496                           
  2497                           ;incstack = 0
  2498                           ;EEPROM_Write_Integer@address stored from wreg
  2499  00124C  6E05               	movwf	EEPROM_Write_Integer@address,c
  2500                           
  2501                           ;EEPROM.c: 22:     for(uint8_t i = 0; i < 2; i++){
  2502  00124E  0E00               	movlw	0
  2503  001250  6E06               	movwf	EEPROM_Write_Integer@i,c
  2504  001252                     l1626:
  2505                           
  2506                           ;EEPROM.c: 23:         EEPROM_Write(address + i,*((int8_t*)(&data)+i));
  2507  001252  0E03               	movlw	low EEPROM_Write_Integer@data
  2508  001254  2406               	addwf	EEPROM_Write_Integer@i,w,c
  2509  001256  6ED9               	movwf	fsr2l,c
  2510  001258  6ADA               	clrf	fsr2h,c
  2511  00125A  0E00               	movlw	high EEPROM_Write_Integer@data
  2512  00125C  22DA               	addwfc	fsr2h,f,c
  2513  00125E  50DF               	movf	indf2,w,c
  2514  001260  6E01               	movwf	EEPROM_Write@dato,c
  2515  001262  5005               	movf	EEPROM_Write_Integer@address,w,c
  2516  001264  2406               	addwf	EEPROM_Write_Integer@i,w,c
  2517  001266  EC4E  F009         	call	_EEPROM_Write
  2518                           
  2519                           ;EEPROM.c: 24:     }
  2520  00126A  2A06               	incf	EEPROM_Write_Integer@i,f,c
  2521  00126C  0E01               	movlw	1
  2522  00126E  6406               	cpfsgt	EEPROM_Write_Integer@i,c
  2523  001270  D7F0               	goto	l1626
  2524  001272  0012               	return	
  2525  001274                     __end_of_EEPROM_Write_Integer:
  2526                           	opt callstack 0
  2527                           
  2528 ;; *************** function _EEPROM_Write_Float *****************
  2529 ;; Defined at:
  2530 ;;		line 27 in file "EEPROM.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  address         1    wreg     unsigned char 
  2533 ;;  data            4    2[COMRAM] float 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  address         1    6[COMRAM] unsigned char 
  2536 ;;  i               1    7[COMRAM] unsigned char 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2546 ;;      Params:         4       0       0       0       0       0       0       0       0
  2547 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2549 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2550 ;;Total ram usage:        6 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    1
  2553 ;; This function calls:
  2554 ;;		_EEPROM_Write
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text16
  2561  001274                     __ptext16:
  2562                           	opt callstack 0
  2563  001274                     _EEPROM_Write_Float:
  2564                           	opt callstack 29
  2565                           
  2566                           ;incstack = 0
  2567                           ;EEPROM_Write_Float@address stored from wreg
  2568  001274  6E07               	movwf	EEPROM_Write_Float@address,c
  2569                           
  2570                           ;EEPROM.c: 28:     for(uint8_t i = 0; i < 4; i++){
  2571  001276  0E00               	movlw	0
  2572  001278  6E08               	movwf	EEPROM_Write_Float@i,c
  2573  00127A                     l1638:
  2574                           
  2575                           ;EEPROM.c: 29:         EEPROM_Write(address + i,*((int8_t*) (&data)+ i));
  2576  00127A  0E03               	movlw	low EEPROM_Write_Float@data
  2577  00127C  2408               	addwf	EEPROM_Write_Float@i,w,c
  2578  00127E  6ED9               	movwf	fsr2l,c
  2579  001280  6ADA               	clrf	fsr2h,c
  2580  001282  0E00               	movlw	high EEPROM_Write_Float@data
  2581  001284  22DA               	addwfc	fsr2h,f,c
  2582  001286  50DF               	movf	indf2,w,c
  2583  001288  6E01               	movwf	EEPROM_Write@dato,c
  2584  00128A  5007               	movf	EEPROM_Write_Float@address,w,c
  2585  00128C  2408               	addwf	EEPROM_Write_Float@i,w,c
  2586  00128E  EC4E  F009         	call	_EEPROM_Write
  2587                           
  2588                           ;EEPROM.c: 30:     }
  2589  001292  2A08               	incf	EEPROM_Write_Float@i,f,c
  2590  001294  0E03               	movlw	3
  2591  001296  6408               	cpfsgt	EEPROM_Write_Float@i,c
  2592  001298  D7F0               	goto	l1638
  2593  00129A  0012               	return	
  2594  00129C                     __end_of_EEPROM_Write_Float:
  2595                           	opt callstack 0
  2596                           
  2597 ;; *************** function _EEPROM_Write *****************
  2598 ;; Defined at:
  2599 ;;		line 3 in file "EEPROM.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  address         1    wreg     unsigned char 
  2602 ;;  dato            1    0[COMRAM] unsigned char 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  address         1    1[COMRAM] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2614 ;;      Params:         1       0       0       0       0       0       0       0       0
  2615 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2617 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2618 ;;Total ram usage:        2 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_EEPROM_Write_Integer
  2624 ;;		_EEPROM_Write_Float
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text17
  2629  00129C                     __ptext17:
  2630                           	opt callstack 0
  2631  00129C                     _EEPROM_Write:
  2632                           	opt callstack 29
  2633                           
  2634                           ;incstack = 0
  2635                           ;EEPROM_Write@address stored from wreg
  2636  00129C  6E02               	movwf	EEPROM_Write@address,c
  2637                           
  2638                           ;EEPROM.c: 4:     EEADR = address;
  2639  00129E  C002  FFA9         	movff	EEPROM_Write@address,4009	;volatile
  2640                           
  2641                           ;EEPROM.c: 5:     EEDATA = dato;
  2642  0012A2  C001  FFA8         	movff	EEPROM_Write@dato,4008	;volatile
  2643                           
  2644                           ;EEPROM.c: 7:     EECON1bits.EEPGD = 0;
  2645  0012A6  9EA6               	bcf	4006,7,c	;volsfr
  2646                           
  2647                           ;EEPROM.c: 8:     EECON1bits.CFGS = 0;
  2648  0012A8  9CA6               	bcf	4006,6,c	;volsfr
  2649                           
  2650                           ;EEPROM.c: 9:     EECON1bits.WREN = 1;
  2651  0012AA  84A6               	bsf	4006,2,c	;volsfr
  2652                           
  2653                           ;EEPROM.c: 10:     INTCONbits.GIE = 0;
  2654  0012AC  9EF2               	bcf	4082,7,c	;volatile
  2655                           
  2656                           ;EEPROM.c: 12:     EECON2 = 0x55;
  2657  0012AE  0E55               	movlw	85
  2658  0012B0  6EA7               	movwf	4007,c	;volsfr
  2659                           
  2660                           ;EEPROM.c: 13:     EECON2 = 0x0AA;
  2661  0012B2  0EAA               	movlw	170
  2662  0012B4  6EA7               	movwf	4007,c	;volsfr
  2663                           
  2664                           ;EEPROM.c: 14:     EECON1bits.WR = 1;
  2665  0012B6  82A6               	bsf	4006,1,c	;volsfr
  2666                           
  2667                           ;EEPROM.c: 15:     INTCONbits.GIE = 1;
  2668  0012B8  8EF2               	bsf	4082,7,c	;volatile
  2669  0012BA                     l37:
  2670  0012BA  A8A1               	btfss	4001,4,c	;volatile
  2671  0012BC  D7FE               	goto	l37
  2672                           
  2673                           ;EEPROM.c: 17:     PIR2bits.EEIF = 0;
  2674  0012BE  98A1               	bcf	4001,4,c	;volatile
  2675  0012C0  0012               	return		;funcret
  2676  0012C2                     __end_of_EEPROM_Write:
  2677                           	opt callstack 0
  2678                           
  2679 ;; *************** function _EEPROM_Read_Integer *****************
  2680 ;; Defined at:
  2681 ;;		line 44 in file "EEPROM.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  address         1    wreg     unsigned char 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  address         1    4[COMRAM] unsigned char 
  2686 ;;  i               1    7[COMRAM] unsigned char 
  2687 ;;  data            2    5[COMRAM] int 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  2    2[COMRAM] short 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2697 ;;      Params:         2       0       0       0       0       0       0       0       0
  2698 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2700 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2701 ;;Total ram usage:        6 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    1
  2704 ;; This function calls:
  2705 ;;		_EEPROM_Read
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text18
  2712  0011CC                     __ptext18:
  2713                           	opt callstack 0
  2714  0011CC                     _EEPROM_Read_Integer:
  2715                           	opt callstack 29
  2716                           
  2717                           ;incstack = 0
  2718                           ;EEPROM_Read_Integer@address stored from wreg
  2719  0011CC  6E05               	movwf	EEPROM_Read_Integer@address,c
  2720                           
  2721                           ;EEPROM.c: 45:     int data;;EEPROM.c: 46:     for(uint8_t i = 0; i < 2; i++){
  2722  0011CE  0E00               	movlw	0
  2723  0011D0  6E08               	movwf	EEPROM_Read_Integer@i,c
  2724  0011D2                     l1650:
  2725                           
  2726                           ;EEPROM.c: 47:         *((int8_t*)(&data)+i) = EEPROM_Read(address + i);
  2727  0011D2  0E06               	movlw	low EEPROM_Read_Integer@data
  2728  0011D4  2408               	addwf	EEPROM_Read_Integer@i,w,c
  2729  0011D6  6ED9               	movwf	fsr2l,c
  2730  0011D8  6ADA               	clrf	fsr2h,c
  2731  0011DA  0E00               	movlw	high EEPROM_Read_Integer@data
  2732  0011DC  22DA               	addwfc	fsr2h,f,c
  2733  0011DE  5005               	movf	EEPROM_Read_Integer@address,w,c
  2734  0011E0  2408               	addwf	EEPROM_Read_Integer@i,w,c
  2735  0011E2  EC6E  F009         	call	_EEPROM_Read
  2736  0011E6  6EDF               	movwf	indf2,c
  2737                           
  2738                           ;EEPROM.c: 48:     }
  2739  0011E8  2A08               	incf	EEPROM_Read_Integer@i,f,c
  2740  0011EA  0E01               	movlw	1
  2741  0011EC  6408               	cpfsgt	EEPROM_Read_Integer@i,c
  2742  0011EE  D7F1               	goto	l1650
  2743                           
  2744                           ;EEPROM.c: 50:     return data;
  2745  0011F0  C006  F003         	movff	EEPROM_Read_Integer@data,?_EEPROM_Read_Integer
  2746  0011F4  C007  F004         	movff	EEPROM_Read_Integer@data+1,?_EEPROM_Read_Integer+1
  2747  0011F8  0012               	return		;funcret
  2748  0011FA                     __end_of_EEPROM_Read_Integer:
  2749                           	opt callstack 0
  2750                           
  2751 ;; *************** function _EEPROM_Read_Float *****************
  2752 ;; Defined at:
  2753 ;;		line 53 in file "EEPROM.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  address         1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  address         1    6[COMRAM] unsigned char 
  2758 ;;  i               1   11[COMRAM] unsigned char 
  2759 ;;  data            4    7[COMRAM] float 
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  4    2[COMRAM] float 
  2762 ;; Registers used:
  2763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2769 ;;      Params:         4       0       0       0       0       0       0       0       0
  2770 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2772 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2773 ;;Total ram usage:       10 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    1
  2776 ;; This function calls:
  2777 ;;		_EEPROM_Read
  2778 ;; This function is called by:
  2779 ;;		_main
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text19
  2784  001164                     __ptext19:
  2785                           	opt callstack 0
  2786  001164                     _EEPROM_Read_Float:
  2787                           	opt callstack 29
  2788                           
  2789                           ;incstack = 0
  2790                           ;EEPROM_Read_Float@address stored from wreg
  2791  001164  6E07               	movwf	EEPROM_Read_Float@address,c
  2792                           
  2793                           ;EEPROM.c: 54:     float data;;EEPROM.c: 55:     for(uint8_t i = 0; i < 4; i++){
  2794  001166  0E00               	movlw	0
  2795  001168  6E0C               	movwf	EEPROM_Read_Float@i,c
  2796  00116A                     l1662:
  2797                           
  2798                           ;EEPROM.c: 56:         *((int8_t*)(&data) + i) = EEPROM_Read(address + i);
  2799  00116A  0E08               	movlw	low EEPROM_Read_Float@data
  2800  00116C  240C               	addwf	EEPROM_Read_Float@i,w,c
  2801  00116E  6ED9               	movwf	fsr2l,c
  2802  001170  6ADA               	clrf	fsr2h,c
  2803  001172  0E00               	movlw	high EEPROM_Read_Float@data
  2804  001174  22DA               	addwfc	fsr2h,f,c
  2805  001176  5007               	movf	EEPROM_Read_Float@address,w,c
  2806  001178  240C               	addwf	EEPROM_Read_Float@i,w,c
  2807  00117A  EC6E  F009         	call	_EEPROM_Read
  2808  00117E  6EDF               	movwf	indf2,c
  2809                           
  2810                           ;EEPROM.c: 57:     }
  2811  001180  2A0C               	incf	EEPROM_Read_Float@i,f,c
  2812  001182  0E03               	movlw	3
  2813  001184  640C               	cpfsgt	EEPROM_Read_Float@i,c
  2814  001186  D7F1               	goto	l1662
  2815                           
  2816                           ;EEPROM.c: 59:     return data;
  2817  001188  C008  F003         	movff	EEPROM_Read_Float@data,?_EEPROM_Read_Float
  2818  00118C  C009  F004         	movff	EEPROM_Read_Float@data+1,?_EEPROM_Read_Float+1
  2819  001190  C00A  F005         	movff	EEPROM_Read_Float@data+2,?_EEPROM_Read_Float+2
  2820  001194  C00B  F006         	movff	EEPROM_Read_Float@data+3,?_EEPROM_Read_Float+3
  2821  001198  0012               	return		;funcret
  2822  00119A                     __end_of_EEPROM_Read_Float:
  2823                           	opt callstack 0
  2824                           
  2825 ;; *************** function _EEPROM_Read *****************
  2826 ;; Defined at:
  2827 ;;		line 33 in file "EEPROM.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  address         1    wreg     unsigned char 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  address         1    0[COMRAM] unsigned char 
  2832 ;;  Data            1    1[COMRAM] unsigned char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      unsigned char 
  2835 ;; Registers used:
  2836 ;;		wreg, status,2
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2842 ;;      Params:         0       0       0       0       0       0       0       0       0
  2843 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2845 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2846 ;;Total ram usage:        2 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_EEPROM_Read_Integer
  2852 ;;		_EEPROM_Read_Float
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text20
  2857  0012DC                     __ptext20:
  2858                           	opt callstack 0
  2859  0012DC                     _EEPROM_Read:
  2860                           	opt callstack 29
  2861                           
  2862                           ;incstack = 0
  2863                           ;EEPROM_Read@address stored from wreg
  2864  0012DC  6E01               	movwf	EEPROM_Read@address,c
  2865                           
  2866                           ;EEPROM.c: 34:     char Data;;EEPROM.c: 35:     EEADR = address;
  2867  0012DE  C001  FFA9         	movff	EEPROM_Read@address,4009	;volatile
  2868                           
  2869                           ;EEPROM.c: 37:     EECON1bits.EEPGD = 0;
  2870  0012E2  9EA6               	bcf	4006,7,c	;volsfr
  2871                           
  2872                           ;EEPROM.c: 38:     EECON1bits.CFGS = 0;
  2873  0012E4  9CA6               	bcf	4006,6,c	;volsfr
  2874                           
  2875                           ;EEPROM.c: 39:     EECON1bits.RD = 1;
  2876  0012E6  80A6               	bsf	4006,0,c	;volsfr
  2877                           
  2878                           ;EEPROM.c: 40:     Data = EEDATA;
  2879  0012E8  CFA8 F002          	movff	4008,EEPROM_Read@Data	;volatile
  2880                           
  2881                           ;EEPROM.c: 41:     return Data;
  2882  0012EC  5002               	movf	EEPROM_Read@Data,w,c
  2883  0012EE  0012               	return		;funcret
  2884  0012F0                     __end_of_EEPROM_Read:
  2885                           	opt callstack 0
  2886                           
  2887                           	psect	rparam
  2888  0000                     tosu	equ	0xFFF
  2889                           tosh	equ	0xFFE
  2890                           tosl	equ	0xFFD
  2891                           stkptr	equ	0xFFC
  2892                           pclatu	equ	0xFFB
  2893                           pclath	equ	0xFFA
  2894                           pcl	equ	0xFF9
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           prodh	equ	0xFF4
  2900                           prodl	equ	0xFF3
  2901                           indf0	equ	0xFEF
  2902                           postinc0	equ	0xFEE
  2903                           postdec0	equ	0xFED
  2904                           preinc0	equ	0xFEC
  2905                           plusw0	equ	0xFEB
  2906                           fsr0h	equ	0xFEA
  2907                           fsr0l	equ	0xFE9
  2908                           wreg	equ	0xFE8
  2909                           indf1	equ	0xFE7
  2910                           postinc1	equ	0xFE6
  2911                           postdec1	equ	0xFE5
  2912                           preinc1	equ	0xFE4
  2913                           plusw1	equ	0xFE3
  2914                           fsr1h	equ	0xFE2
  2915                           fsr1l	equ	0xFE1
  2916                           bsr	equ	0xFE0
  2917                           indf2	equ	0xFDF
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           preinc2	equ	0xFDC
  2921                           plusw2	equ	0xFDB
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     16      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_1(CODE[35]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1012_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_1(CODE[35]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 35
		 -> STR_1(CODE[35]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _abs->___aomod
    _USART_Init->___lldiv
    _EEPROM_Write_Integer->_EEPROM_Write
    _EEPROM_Write_Float->_EEPROM_Write
    _EEPROM_Read_Integer->_EEPROM_Read
    _EEPROM_Read_Float->_EEPROM_Read

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    7903
                                             92 COMRAM     2     2      0
                                              4 BANK0     12    12      0
                  _EEPROM_Read_Float
                _EEPROM_Read_Integer
                 _EEPROM_Write_Float
               _EEPROM_Write_Integer
                         _USART_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6103
                                             88 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5973
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5619
                                             64 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4270
                                             28 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2621
                                             17 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1191
                                             10 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     790
                                              1 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          12     4      8     510
                                             13 COMRAM    12     4      8
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write_Integer                                 4     2      2     407
                                              2 COMRAM     4     2      2
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write_Float                                   6     2      4     407
                                              2 COMRAM     6     2      4
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read_Integer                                  6     4      2     203
                                              2 COMRAM     6     4      2
                        _EEPROM_Read
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read_Float                                   10     6      4     203
                                              2 COMRAM    10     6      4
                        _EEPROM_Read
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Read                                          2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Read_Float
     _EEPROM_Read
   _EEPROM_Read_Integer
     _EEPROM_Read
   _EEPROM_Write_Float
     _EEPROM_Write
   _EEPROM_Write_Integer
     _EEPROM_Write
   _USART_Init
     ___lldiv
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      38       5       35.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      20        0.0%
DATA                 0      0      96       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun May 31 22:54:33 2020

                           l37 12BA                    __CFG_BOR$ON 000000                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                            l210 0FFE                            l135 0F24  
                          l146 089A                            l148 08A2                            l858 11C2  
                 __CFG_CPB$OFF 000000                            u600 1020                   __CFG_CPD$OFF 000000  
                          u620 1068                            u800 0DB8                            u721 0C48  
                          u740 0C80                            u900 09D0                            u830 084E  
                          u920 09F2                            u840 0850                            u921 09F0  
                          u690 11A8                            u930 0A00                            u940 0A06  
                          u870 0890                            u960 0A14                            u890 08B6  
   __size_of_EEPROM_Read_Float 0036                            _abs 119A                            _pad 0EF4  
                          wreg 000FE8            EEPROM_Write_Float@i 0008                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           ?_abs 0013                           l1300 12F2  
                         l1310 1028                           l1320 1136                           l1402 0D14  
                         l1330 1208                           l1324 114C                           l1340 0F0E  
                         l1500 0A42                           l1430 0DFC                           l1422 0DA0  
                         l1414 0D62                           l1350 0F46                           l1424 0DB4  
                         l1328 1204                           l1344 0F1C                           l1370 0C1A  
                         l1434 0E12                           l1418 0D86                           l1354 0F74  
                         l1346 0F2E                           l1522 0B5C                           l1532 0BA2  
                         l1606 0FF0                           l1382 0C68                           l1438 0E38  
                         l1462 08BC                           l1384 0C7C                           l1376 0C42  
                         l1448 087C                           l1528 0B98                           l1650 11D2  
                         l1626 1252                           l1394 0CD8                           l1466 08CA  
                         l1538 0BBA                           l1476 09C2                           l1662 116A  
                         l1638 127A                           l1398 0CEE                           l1496 0A2A  
                         l1584 10EA                           l1594 0FB0                           l1586 1110  
                         l1596 0FBC                           l1686 0EC8                           ?_pad 0012  
                         STR_1 0801                           u1000 0ADE                           u1050 0FC0  
                         u1127 0EE6                           u1075 10A8                           abs@a 0013  
                         _dbuf 0068                           _main 0E5A                           _dtoa 0826  
                         _prec 0064                           _nout 0060                           pad@i 0019  
                         pad@p 0016                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           pad@w 001B  
                         fsr2l 000FD9                           start 0000                  __CFG_IESO$OFF 000000  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                          ??_abs 0015  
         __end_of_EEPROM_Write 12C2                          ??_pad 0018                  __CFG_PLLDIV$1 000000  
               __CFG_CCP2MX$ON 000000                __end_of___aodiv 0D36                          ?_main 0001  
                        ?_dtoa 001D                __end_of___aomod 0E5A                          _EEADR 000FA9  
              __end_of___lldiv 1010                          _RCREG 000FAE                   vfpfcnvrt@fmt 0043  
                        _SPBRG 000FAF                  __CFG_USBDIV$1 000000                          _TXREG 000FAD  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000   __size_of_EEPROM_Read_Integer 002E  
                        _flags 0066                          _fputc 1010                          _fputs 112C  
                        pad@fp 0012                          _width 0062                          _putch 12F0  
                        dtoa@d 001F                          dtoa@i 003F                          dtoa@n 0037  
                        dtoa@p 0031                          dtoa@s 0035                          dtoa@w 0033  
                        tablat 000FF5                          status 000FD8                 __CFG_ICPRT$OFF 000000  
             EEPROM_Write@dato 0001           __size_of_EEPROM_Read 0014                    ?_USART_Init 000E  
              __initialization 12C2                   __end_of_main 0EF4                   __end_of_dtoa 0A6C  
                       ??_main 005D                         ??_dtoa 0027                  __activetblptr 000001  
                       ?_fputc 0002                         ?_fputs 000B                         _EEDATA 000FA8  
                       _EECON2 000FA7          EEPROM_Write_Integer@i 0006                         ?_putch 0001  
   EEPROM_Read_Integer@address 0005                 __CFG_XINST$OFF 000000                   vfprintf@cfmt 0057  
                    ??___aodiv 0011                      ??___aomod 0011                 __CFG_STVREN$ON 000000  
                    ??___lldiv 0009                         clear_0 12C8                         _printf 1224  
                       pad@buf 0014                         dtoa@fp 001D                         _strlen 11FA  
                       fputc@c 0002                         fputs@c 000F                         fputs@i 0010  
                       fputs@s 000B                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8            __size_of_USART_Init 005A  
             __end_of_vfprintf 112C                     __accesstop 0060        __end_of__initialization 12CE  
              __CFG_PBADEN$OFF 000000                __CFG_FOSC$XT_XT 000000                  ___rparam_used 000001  
        __size_of_EEPROM_Write 0026                 __pcstackCOMRAM 0001                  __end_of_fputc 107C  
                __end_of_fputs 1164                  __end_of_putch 12FC  __size_of_EEPROM_Write_Integer 0028  
       EEPROM_Write_Float@data 0003                        ??_fputc 0006                        ??_fputs 000F  
                      ??_putch 0001                   _EEPROM_Write 129C                     __pbssBANK0 0060  
  __size_of_EEPROM_Write_Float 0028            _EEPROM_Read_Integer 11CC       EEPROM_Read_Float@address 0007  
                      ?_printf 0059                        ?_strlen 0001             __size_of_vfpfcnvrt 0182  
         ?_EEPROM_Read_Integer 0003        EEPROM_Read_Integer@data 0006                __CFG_VREGEN$OFF 000000  
                 ??_USART_Init 0016                        __Hparam 0000                        __Lparam 0000  
                      ___aodiv 0BEE                        ___aomod 0D36       EEPROM_Write_Integer@data 0003  
                      ___lldiv 0F8E                      ?_vfprintf 0051                   __psmallconst 0800  
               USART_Init@BAUD 0012                        __pcinit 12C2                 USART_Init@FOSC 000E  
                      __ramtop 0800                        __ptext0 0E5A                        __ptext1 1224  
                      __ptext2 10D6                        __ptext3 0A6C                        __ptext4 0826  
                      __ptext5 0EF4                        __ptext6 11FA                        __ptext7 112C  
                      __ptext8 1010                        __ptext9 12F0                __size_of_printf 0028  
              __size_of_strlen 002A                   __size_of_abs 0032                   __size_of_pad 009A  
        ??_EEPROM_Read_Integer 0005             __end_of_USART_Init 10D6                        main@dec 0090  
         end_of_initialization 12CE                  ??_EEPROM_Read 0001                        fputc@fp 0004  
                      fputs@fp 000D                ___lldiv@divisor 0005                ___lldiv@counter 000D  
            __end_of_vfpfcnvrt 0BEE                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                   ??_vfprintf 0057                        strlen@a 0003                        strlen@s 0001  
                    _TRISCbits 000F94                      _TXSTAbits 000FAC            __end_of_EEPROM_Read 12F0  
                  vfpfcnvrt@ap 0045                    vfpfcnvrt@fp 0041                    vfpfcnvrt@ll 0049  
                  _BAUDCONbits 000FB8                 __end_of_printf 124C                 __end_of_strlen 1224  
          start_initialization 12C2                    __end_of_abs 11CC                    __end_of_pad 0F8E  
 __end_of_EEPROM_Write_Integer 1274                    vfprintf@fmt 0053               __CFG_LPT1OSC$OFF 000000  
                     ??_printf 005D                       ??_strlen 0003    EEPROM_Write_Integer@address 0005  
                __pcstackBANK0 0088               ___aodiv@dividend 0001     __end_of_EEPROM_Write_Float 129C  
                  _EEPROM_Read 12DC                       ?___aodiv 0001                       ?___aomod 0001  
             ___aodiv@quotient 0013                       ?___lldiv 0001              __size_of_vfprintf 0056  
                  __smallconst 0800                 __size_of_fputc 006C                 __size_of_fputs 0038  
               __size_of_putch 000C                       _PIR1bits 000F9E                       _PIR2bits 000FA1  
             __CFG_WDTPS$32768 000000                      _vfpfcnvrt 0A6C    __end_of_EEPROM_Read_Integer 11FA  
                    main@dato1 0096           _EEPROM_Write_Integer 124C                     _EECON1bits 000FA6  
        EEPROM_Read_Float@data 0008                       __Hrparam 0000                     vfprintf@ap 0055  
                     __Lrparam 0000                     vfprintf@fp 0051                   __Lsmallconst 0800  
             __size_of___aodiv 0148               __size_of___aomod 0124               __size_of___lldiv 0082  
                   ?_vfpfcnvrt 0041                ___aodiv@divisor 0009                ___aodiv@counter 0011  
        ?_EEPROM_Write_Integer 0003              _EEPROM_Read_Float 1164                       _dtoa$551 002F  
                     __ptext10 119A                       __ptext11 0D36                       __ptext20 12DC  
                     __ptext12 0BEE                       __ptext13 107C                       __ptext14 0F8E  
                     __ptext15 124C                       __ptext16 1274                       __ptext17 129C  
                     __ptext18 11CC                       __ptext19 1164             ?_EEPROM_Read_Float 0003  
                ?_EEPROM_Write 0001                  __size_of_main 009A                  __size_of_dtoa 0246  
          ??_EEPROM_Read_Float 0007                       _vfprintf 10D6                      printf@fmt 0059  
             ___aomod@dividend 0001          __CFG_CPUDIV$OSC1_PLL2 000000      __end_of_EEPROM_Read_Float 119A  
                    putch@dato 0001                     _INTCONbits 000FF2                 ??_EEPROM_Write 0002  
                 ?_EEPROM_Read 0001               ___lldiv@dividend 0001           EEPROM_Read_Integer@i 0008  
           EEPROM_Read@address 0001             _EEPROM_Write_Float 1274                       printf@ap 008A  
              ___aomod@divisor 0009                    ??_vfpfcnvrt 0047                ___aomod@counter 0011  
       ??_EEPROM_Write_Integer 0005            ?_EEPROM_Write_Float 0003               ___lldiv@quotient 0009  
           EEPROM_Read_Float@i 000C                   ___aodiv@sign 0012           ??_EEPROM_Write_Float 0007  
              EEPROM_Read@Data 0002                   ___aomod@sign 0012      EEPROM_Write_Float@address 0007  
                   _USART_Init 107C            EEPROM_Write@address 0002  
